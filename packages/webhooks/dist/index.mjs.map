{"version":3,"sources":["../src/event-bus/event-bus.ts","../src/index.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["import { z } from 'zod';\nimport { EventEmitter } from 'events';\nimport crypto from 'crypto';\n\n// ============================================================================\n// Event Bus Schemas\n// ============================================================================\n\nexport const WebhookEventSchema = z.object({\n  id: z.string(),\n  type: z.string(),\n  data: z.record(z.any()),\n  timestamp: z.date(),\n  source: z.string(),\n  version: z.string().default('1.0'),\n  metadata: z.record(z.string()).optional(),\n});\n\nexport const WebhookSubscriptionSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string().optional(),\n  url: z.string().url(),\n  events: z.array(z.string()),\n  secret: z.string().optional(),\n  isActive: z.boolean().default(true),\n  retryPolicy: z.object({\n    maxRetries: z.number().min(0).max(10).default(3),\n    retryDelay: z.number().min(100).max(300000).default(1000), // milliseconds\n    backoffMultiplier: z.number().min(1).max(5).default(2),\n  }),\n  filters: z.record(z.string()).optional(),\n  headers: z.record(z.string()).optional(),\n  timeout: z.number().min(1000).max(30000).default(10000), // milliseconds\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const WebhookDeliverySchema = z.object({\n  id: z.string(),\n  subscriptionId: z.string(),\n  eventId: z.string(),\n  url: z.string(),\n  status: z.enum(['pending', 'delivered', 'failed', 'retrying']),\n  attempts: z.number().min(0).default(0),\n  maxAttempts: z.number().min(1).default(3),\n  nextRetryAt: z.date().optional(),\n  deliveredAt: z.date().optional(),\n  failedAt: z.date().optional(),\n  response: z.object({\n    statusCode: z.number().optional(),\n    headers: z.record(z.string()).optional(),\n    body: z.string().optional(),\n  }).optional(),\n  error: z.string().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const WebhookEventFilterSchema = z.object({\n  eventTypes: z.array(z.string()).optional(),\n  sources: z.array(z.string()).optional(),\n  dataFilters: z.record(z.string()).optional(),\n  timeRange: z.object({\n    start: z.date(),\n    end: z.date(),\n  }).optional(),\n});\n\n// ============================================================================\n// Type Exports\n// ============================================================================\n\nexport type WebhookEvent = z.infer<typeof WebhookEventSchema>;\nexport type WebhookSubscription = z.infer<typeof WebhookSubscriptionSchema>;\nexport type WebhookDelivery = z.infer<typeof WebhookDeliverySchema>;\nexport type WebhookEventFilter = z.infer<typeof WebhookEventFilterSchema>;\n\n// ============================================================================\n// Event Bus\n// ============================================================================\n\nexport class EventBus extends EventEmitter {\n  private events: Map<string, WebhookEvent> = new Map();\n  private subscriptions: Map<string, WebhookSubscription> = new Map();\n  private deliveries: Map<string, WebhookDelivery> = new Map();\n  private retryQueue: Map<string, NodeJS.Timeout> = new Map();\n\n  constructor() {\n    super();\n    this.setupEventHandlers();\n  }\n\n  // ============================================================================\n  // Event Management\n  // ============================================================================\n\n  async emitEvent(event: Omit<WebhookEvent, 'id' | 'timestamp'>): Promise<WebhookEvent> {\n    const webhookEvent: WebhookEvent = {\n      id: this.generateEventId(),\n      timestamp: new Date(),\n      ...event,\n    };\n\n    this.events.set(webhookEvent.id, webhookEvent);\n    \n    // Emit to internal listeners\n    this.emit('event', webhookEvent);\n    \n    // Process webhook deliveries\n    await this.processWebhookDeliveries(webhookEvent);\n    \n    return webhookEvent;\n  }\n\n  async getEvent(eventId: string): Promise<WebhookEvent | null> {\n    return this.events.get(eventId) || null;\n  }\n\n  async getEvents(filter?: WebhookEventFilter): Promise<WebhookEvent[]> {\n    let events = Array.from(this.events.values());\n    \n    if (filter) {\n      if (filter.eventTypes && filter.eventTypes.length > 0) {\n        events = events.filter(e => filter.eventTypes!.includes(e.type));\n      }\n      \n      if (filter.sources && filter.sources.length > 0) {\n        events = events.filter(e => filter.sources!.includes(e.source));\n      }\n      \n      if (filter.dataFilters) {\n        events = events.filter(e => {\n          return Object.entries(filter.dataFilters!).every(([key, value]) => {\n            return e.data[key] === value;\n          });\n        });\n      }\n      \n      if (filter.timeRange) {\n        events = events.filter(e => {\n          return e.timestamp >= filter.timeRange!.start && e.timestamp <= filter.timeRange!.end;\n        });\n      }\n    }\n    \n    return events.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  // ============================================================================\n  // Subscription Management\n  // ============================================================================\n\n  async createSubscription(data: Omit<WebhookSubscription, 'id' | 'createdAt' | 'updatedAt'>): Promise<WebhookSubscription> {\n    const subscription: WebhookSubscription = {\n      id: this.generateSubscriptionId(),\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.subscriptions.set(subscription.id, subscription);\n    \n    // Emit subscription created event\n    this.emit('subscription:created', subscription);\n    \n    return subscription;\n  }\n\n  async getSubscription(subscriptionId: string): Promise<WebhookSubscription | null> {\n    return this.subscriptions.get(subscriptionId) || null;\n  }\n\n  async updateSubscription(subscriptionId: string, updates: Partial<WebhookSubscription>): Promise<WebhookSubscription | null> {\n    const subscription = this.subscriptions.get(subscriptionId);\n    if (!subscription) return null;\n\n    const updatedSubscription: WebhookSubscription = {\n      ...subscription,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    this.subscriptions.set(subscriptionId, updatedSubscription);\n    \n    // Emit subscription updated event\n    this.emit('subscription:updated', updatedSubscription);\n    \n    return updatedSubscription;\n  }\n\n  async deleteSubscription(subscriptionId: string): Promise<boolean> {\n    const deleted = this.subscriptions.delete(subscriptionId);\n    \n    if (deleted) {\n      // Emit subscription deleted event\n      this.emit('subscription:deleted', subscriptionId);\n    }\n    \n    return deleted;\n  }\n\n  async getSubscriptions(): Promise<WebhookSubscription[]> {\n    return Array.from(this.subscriptions.values());\n  }\n\n  async getActiveSubscriptions(): Promise<WebhookSubscription[]> {\n    return Array.from(this.subscriptions.values()).filter(s => s.isActive);\n  }\n\n  // ============================================================================\n  // Webhook Delivery\n  // ============================================================================\n\n  private async processWebhookDeliveries(event: WebhookEvent): Promise<void> {\n    const activeSubscriptions = await this.getActiveSubscriptions();\n    \n    for (const subscription of activeSubscriptions) {\n      // Check if subscription is interested in this event\n      if (subscription.events.includes(event.type) || subscription.events.includes('*')) {\n        await this.createWebhookDelivery(subscription, event);\n      }\n    }\n  }\n\n  private async createWebhookDelivery(subscription: WebhookSubscription, event: WebhookEvent): Promise<WebhookDelivery> {\n    const delivery: WebhookDelivery = {\n      id: this.generateDeliveryId(),\n      subscriptionId: subscription.id,\n      eventId: event.id,\n      url: subscription.url,\n      status: 'pending',\n      attempts: 0,\n      maxAttempts: subscription.retryPolicy.maxRetries,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.deliveries.set(delivery.id, delivery);\n    \n    // Schedule immediate delivery\n    await this.scheduleWebhookDelivery(delivery);\n    \n    return delivery;\n  }\n\n  private async scheduleWebhookDelivery(delivery: WebhookDelivery): Promise<void> {\n    const subscription = this.subscriptions.get(delivery.subscriptionId);\n    if (!subscription) return;\n\n    const event = this.events.get(delivery.eventId);\n    if (!event) return;\n\n    try {\n      await this.deliverWebhook(delivery, subscription, event);\n    } catch (error) {\n      await this.handleWebhookDeliveryFailure(delivery, error);\n    }\n  }\n\n  private async deliverWebhook(\n    delivery: WebhookDelivery,\n    subscription: WebhookSubscription,\n    event: WebhookEvent\n  ): Promise<void> {\n    const payload = {\n      id: event.id,\n      type: event.type,\n      data: event.data,\n      timestamp: event.timestamp.toISOString(),\n      source: event.source,\n      version: event.version,\n      metadata: event.metadata,\n    };\n\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'User-Agent': 'Carnil-Webhooks/1.0',\n      'X-Webhook-Event': event.type,\n      'X-Webhook-Source': event.source,\n      ...subscription.headers,\n    };\n\n    // Add signature if secret is provided\n    if (subscription.secret) {\n      const signature = this.generateWebhookSignature(payload, subscription.secret);\n      headers['X-Webhook-Signature'] = signature;\n    }\n\n    const response = await fetch(subscription.url, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(payload),\n      signal: AbortSignal.timeout(subscription.timeout),\n    });\n\n    if (response.ok) {\n      await this.markDeliveryAsDelivered(delivery, response);\n    } else {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n  }\n\n  private async handleWebhookDeliveryFailure(delivery: WebhookDelivery, error: any): Promise<void> {\n    delivery.attempts += 1;\n    delivery.status = 'failed';\n    delivery.error = error.message;\n    delivery.updatedAt = new Date();\n\n    if (delivery.attempts < delivery.maxAttempts) {\n      // Schedule retry\n      const subscription = this.subscriptions.get(delivery.subscriptionId);\n      if (subscription) {\n        const retryDelay = this.calculateRetryDelay(delivery.attempts, subscription.retryPolicy);\n        delivery.nextRetryAt = new Date(Date.now() + retryDelay);\n        delivery.status = 'retrying';\n        \n        // Schedule retry\n        const timeoutId = setTimeout(() => {\n          this.scheduleWebhookDelivery(delivery);\n        }, retryDelay);\n        \n        this.retryQueue.set(delivery.id, timeoutId);\n      }\n    } else {\n      delivery.failedAt = new Date();\n      delivery.status = 'failed';\n    }\n\n    this.deliveries.set(delivery.id, delivery);\n  }\n\n  private async markDeliveryAsDelivered(delivery: WebhookDelivery, response: Response): Promise<void> {\n    delivery.status = 'delivered';\n    delivery.deliveredAt = new Date();\n    delivery.updatedAt = new Date();\n    delivery.response = {\n      statusCode: response.status,\n      headers: Object.fromEntries(response.headers.entries()),\n      body: await response.text(),\n    };\n\n    this.deliveries.set(delivery.id, delivery);\n  }\n\n  // ============================================================================\n  // Delivery Management\n  // ============================================================================\n\n  async getDelivery(deliveryId: string): Promise<WebhookDelivery | null> {\n    return this.deliveries.get(deliveryId) || null;\n  }\n\n  async getDeliveries(subscriptionId?: string): Promise<WebhookDelivery[]> {\n    let deliveries = Array.from(this.deliveries.values());\n    \n    if (subscriptionId) {\n      deliveries = deliveries.filter(d => d.subscriptionId === subscriptionId);\n    }\n    \n    return deliveries.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getDeliveryStats(subscriptionId?: string): Promise<{\n    total: number;\n    delivered: number;\n    failed: number;\n    pending: number;\n    retrying: number;\n    successRate: number;\n  }> {\n    const deliveries = await this.getDeliveries(subscriptionId);\n    \n    const stats = {\n      total: deliveries.length,\n      delivered: deliveries.filter(d => d.status === 'delivered').length,\n      failed: deliveries.filter(d => d.status === 'failed').length,\n      pending: deliveries.filter(d => d.status === 'pending').length,\n      retrying: deliveries.filter(d => d.status === 'retrying').length,\n      successRate: 0,\n    };\n    \n    stats.successRate = stats.total > 0 ? (stats.delivered / stats.total) * 100 : 0;\n    \n    return stats;\n  }\n\n  // ============================================================================\n  // Private Methods\n  // ============================================================================\n\n  private setupEventHandlers(): void {\n    this.on('event', (event: WebhookEvent) => {\n      console.log(`Event emitted: ${event.type} (${event.id})`);\n    });\n    \n    this.on('subscription:created', (subscription: WebhookSubscription) => {\n      console.log(`Subscription created: ${subscription.name} (${subscription.id})`);\n    });\n    \n    this.on('subscription:updated', (subscription: WebhookSubscription) => {\n      console.log(`Subscription updated: ${subscription.name} (${subscription.id})`);\n    });\n    \n    this.on('subscription:deleted', (subscriptionId: string) => {\n      console.log(`Subscription deleted: ${subscriptionId}`);\n    });\n  }\n\n  private generateEventId(): string {\n    return `evt_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n  }\n\n  private generateSubscriptionId(): string {\n    return `sub_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n  }\n\n  private generateDeliveryId(): string {\n    return `del_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n  }\n\n  private generateWebhookSignature(payload: any, secret: string): string {\n    const hmac = crypto.createHmac('sha256', secret);\n    hmac.update(JSON.stringify(payload));\n    return `sha256=${hmac.digest('hex')}`;\n  }\n\n  private calculateRetryDelay(attempt: number, retryPolicy: WebhookSubscription['retryPolicy']): number {\n    return retryPolicy.retryDelay * Math.pow(retryPolicy.backoffMultiplier, attempt - 1);\n  }\n}\n\n// ============================================================================\n// Global Event Bus Instance\n// ============================================================================\n\nexport const globalEventBus = new EventBus();\n","// ============================================================================\n// Webhooks Package for Carnil Payments SDK\n// ============================================================================\n\nimport { WebhookEvent } from './event-bus/event-bus';\n\nexport { EventBus } from './event-bus/event-bus';\n\n// Re-export core types for convenience\nexport type { CarnilResponse } from '@carnil/core';\nexport type { WebhookEvent } from './event-bus/event-bus';\n\n// Webhook event types\nexport interface WebhookHandler {\n  (event: WebhookEvent): Promise<void>;\n}\n\nexport interface WebhookConfig {\n  secret: string;\n  endpoint: string;\n  events: string[];\n}\n\n// Event bus for webhook processing\nexport class WebhookProcessor {\n  private handlers: Map<string, WebhookHandler[]> = new Map();\n\n  constructor() {}\n\n  registerHandler(eventType: string, handler: WebhookHandler): void {\n    if (!this.handlers.has(eventType)) {\n      this.handlers.set(eventType, []);\n    }\n    this.handlers.get(eventType)!.push(handler);\n  }\n\n  async processWebhook(event: WebhookEvent): Promise<void> {\n    const handlers = this.handlers.get(event.type) || [];\n    await Promise.all(handlers.map(handler => handler(event)));\n  }\n}\n"]}