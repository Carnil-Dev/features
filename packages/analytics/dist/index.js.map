{"version":3,"sources":["../src/modules/usage-tracker.ts","../src/metrics/ai-metrics.ts","../src/dashboards/customer-dashboard.tsx","../src/index.ts"],"names":["z","jsxs","jsx","ResponsiveContainer","LineChart","CartesianGrid","XAxis","YAxis","Tooltip","Line","BarChart","Bar","PieChart","Pie","Cell","useState","useEffect"],"mappings":"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","file":"index.js","sourcesContent":["import { z } from 'zod';\n\n// ============================================================================\n// Usage Tracking Schemas\n// ============================================================================\n\nexport const UsageEventSchema = z.object({\n  customerId: z.string(),\n  featureId: z.string(),\n  usage: z.number().positive(),\n  timestamp: z.date(),\n  metadata: z.record(z.string()).optional(),\n  sessionId: z.string().optional(),\n  userId: z.string().optional(),\n});\n\nexport const AIUsageEventSchema = z.object({\n  customerId: z.string(),\n  modelId: z.string(),\n  provider: z.string(),\n  tokens: z.number().positive(),\n  inputTokens: z.number().nonnegative(),\n  outputTokens: z.number().nonnegative(),\n  cost: z.number().nonnegative(),\n  timestamp: z.date(),\n  metadata: z.record(z.string()).optional(),\n  sessionId: z.string().optional(),\n  userId: z.string().optional(),\n});\n\nexport const CreditBalanceSchema = z.object({\n  customerId: z.string(),\n  featureId: z.string(),\n  balance: z.number().nonnegative(),\n  limit: z.number().positive().optional(),\n  resetAt: z.date(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const UsageLimitSchema = z.object({\n  customerId: z.string(),\n  featureId: z.string(),\n  limit: z.number().positive(),\n  period: z.enum(['day', 'week', 'month', 'year']),\n  resetAt: z.date(),\n  overageAllowed: z.boolean().default(false),\n  overagePrice: z.number().optional(),\n});\n\n// ============================================================================\n// Type Exports\n// ============================================================================\n\nexport type UsageEvent = z.infer<typeof UsageEventSchema>;\nexport type AIUsageEvent = z.infer<typeof AIUsageEventSchema>;\nexport type CreditBalance = z.infer<typeof CreditBalanceSchema>;\nexport type UsageLimit = z.infer<typeof UsageLimitSchema>;\n\n// ============================================================================\n// Usage Tracker Interface\n// ============================================================================\n\nexport interface UsageTracker {\n  // Track usage events\n  trackUsage(event: UsageEvent): Promise<void>;\n  trackAIUsage(event: AIUsageEvent): Promise<void>;\n\n  // Get usage metrics\n  getUsageMetrics(customerId: string, featureId: string, period: string): Promise<UsageEvent[]>;\n  getAIUsageMetrics(customerId: string, modelId?: string, period?: string): Promise<AIUsageEvent[]>;\n\n  // Credit and limit management\n  getCreditBalance(customerId: string, featureId: string): Promise<CreditBalance | null>;\n  updateCreditBalance(\n    customerId: string,\n    featureId: string,\n    amount: number\n  ): Promise<CreditBalance>;\n  setUsageLimit(customerId: string, limit: UsageLimit): Promise<void>;\n  getUsageLimit(customerId: string, featureId: string): Promise<UsageLimit | null>;\n\n  // Check if usage is allowed\n  checkUsageAllowed(\n    customerId: string,\n    featureId: string,\n    requiredUsage: number\n  ): Promise<{\n    allowed: boolean;\n    remaining: number;\n    limit: number;\n    resetAt: Date;\n  }>;\n\n  // Analytics queries\n  getUsageAnalytics(\n    customerId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<{\n    totalUsage: number;\n    totalCost: number;\n    topFeatures: Array<{ featureId: string; usage: number; cost: number }>;\n    dailyBreakdown: Array<{ date: string; usage: number; cost: number }>;\n  }>;\n\n  getAIUsageAnalytics(\n    customerId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<{\n    totalTokens: number;\n    totalCost: number;\n    topModels: Array<{ modelId: string; tokens: number; cost: number }>;\n    dailyBreakdown: Array<{ date: string; tokens: number; cost: number }>;\n  }>;\n}\n\n// ============================================================================\n// Real-time Usage Meter\n// ============================================================================\n\nexport class RealTimeUsageMeter {\n  private usageCache = new Map<string, number>();\n  private lastReset = new Map<string, Date>();\n\n  constructor(private tracker: UsageTracker) {}\n\n  async trackUsage(customerId: string, featureId: string, usage: number): Promise<boolean> {\n    const key = `${customerId}:${featureId}`;\n    const currentUsage = this.usageCache.get(key) || 0;\n    const newUsage = currentUsage + usage;\n\n    // Check if usage is allowed\n    const allowed = await this.tracker.checkUsageAllowed(customerId, featureId, usage);\n\n    if (!allowed.allowed) {\n      return false;\n    }\n\n    // Update cache\n    this.usageCache.set(key, newUsage);\n\n    // Track in database\n    await this.tracker.trackUsage({\n      customerId,\n      featureId,\n      usage,\n      timestamp: new Date(),\n    });\n\n    return true;\n  }\n\n  async trackAIUsage(\n    customerId: string,\n    modelId: string,\n    tokens: number,\n    cost: number\n  ): Promise<boolean> {\n    // Track AI usage\n    await this.tracker.trackAIUsage({\n      customerId,\n      modelId,\n      provider: 'openai', // or other provider\n      tokens,\n      inputTokens: Math.floor(tokens * 0.7), // Estimate\n      outputTokens: Math.floor(tokens * 0.3), // Estimate\n      cost,\n      timestamp: new Date(),\n    });\n\n    return true;\n  }\n\n  getCurrentUsage(customerId: string, featureId: string): number {\n    const key = `${customerId}:${featureId}`;\n    return this.usageCache.get(key) || 0;\n  }\n\n  async resetUsage(customerId: string, featureId: string): Promise<void> {\n    const key = `${customerId}:${featureId}`;\n    this.usageCache.delete(key);\n    this.lastReset.set(key, new Date());\n  }\n}\n\n// ============================================================================\n// Usage Analytics Engine\n// ============================================================================\n\nexport class UsageAnalyticsEngine {\n  constructor(private tracker: UsageTracker) {}\n\n  async generateCustomerReport(\n    customerId: string,\n    period: string = 'month'\n  ): Promise<{\n    summary: {\n      totalUsage: number;\n      totalCost: number;\n      topFeatures: Array<{ featureId: string; usage: number; cost: number }>;\n      averageDailyUsage: number;\n    };\n    trends: {\n      usageGrowth: number;\n      costGrowth: number;\n      peakUsageDay: string;\n      peakUsageHour: number;\n    };\n    recommendations: string[];\n  }> {\n    const endDate = new Date();\n    const startDate = new Date();\n\n    switch (period) {\n      case 'day':\n        startDate.setDate(endDate.getDate() - 1);\n        break;\n      case 'week':\n        startDate.setDate(endDate.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(endDate.getMonth() - 1);\n        break;\n      case 'year':\n        startDate.setFullYear(endDate.getFullYear() - 1);\n        break;\n    }\n\n    const analytics = await this.tracker.getUsageAnalytics(customerId, startDate, endDate);\n    const aiAnalytics = await this.tracker.getAIUsageAnalytics(customerId, startDate, endDate);\n\n    return {\n      summary: {\n        totalUsage: analytics.totalUsage,\n        totalCost: analytics.totalCost + aiAnalytics.totalCost,\n        topFeatures: analytics.topFeatures,\n        averageDailyUsage: analytics.totalUsage / analytics.dailyBreakdown.length,\n      },\n      trends: {\n        usageGrowth: this.calculateGrowthRate(analytics.dailyBreakdown),\n        costGrowth: this.calculateGrowthRate(\n          analytics.dailyBreakdown.map(d => ({ ...d, usage: d.cost }))\n        ),\n        peakUsageDay: this.findPeakDay(analytics.dailyBreakdown),\n        peakUsageHour: this.findPeakHour(analytics.dailyBreakdown),\n      },\n      recommendations: this.generateRecommendations(analytics, aiAnalytics),\n    };\n  }\n\n  private calculateGrowthRate(data: Array<{ usage: number }>): number {\n    if (data.length < 2) return 0;\n\n    const first = data[0]?.usage;\n    const last = data[data.length - 1]?.usage;\n\n    if (first === undefined || last === undefined) return 0;\n\n    return ((last - first) / first) * 100;\n  }\n\n  private findPeakDay(data: Array<{ date: string; usage: number }>): string {\n    return data.reduce((peak, current) => (current.usage > peak.usage ? current : peak)).date;\n  }\n\n  private findPeakHour(_data: Array<{ date: string; usage: number }>): number {\n    // This would require hourly breakdown data\n    return 14; // 2 PM as example\n  }\n\n  private generateRecommendations(analytics: any, aiAnalytics: any): string[] {\n    const recommendations: string[] = [];\n\n    if (analytics.totalCost > 1000) {\n      recommendations.push('Consider upgrading to a higher tier plan to reduce per-unit costs');\n    }\n\n    if (aiAnalytics.totalTokens > 100000) {\n      recommendations.push('High AI usage detected - consider implementing usage-based pricing');\n    }\n\n    if (analytics.topFeatures.length > 0) {\n      const topFeature = analytics.topFeatures[0];\n      recommendations.push(\n        `Optimize usage of ${topFeature.featureId} - it's your most used feature`\n      );\n    }\n\n    return recommendations;\n  }\n}\n","import { z } from 'zod';\n\n// ============================================================================\n// AI Metrics Schemas\n// ============================================================================\n\nexport const TokenUsageSchema = z.object({\n  modelId: z.string(),\n  provider: z.string(),\n  inputTokens: z.number().nonnegative(),\n  outputTokens: z.number().nonnegative(),\n  totalTokens: z.number().nonnegative(),\n  cost: z.number().nonnegative(),\n  timestamp: z.date(),\n  customerId: z.string(),\n  sessionId: z.string().optional(),\n  requestId: z.string().optional(),\n});\n\nexport const ModelPerformanceSchema = z.object({\n  modelId: z.string(),\n  provider: z.string(),\n  averageLatency: z.number().nonnegative(),\n  successRate: z.number().min(0).max(1),\n  errorRate: z.number().min(0).max(1),\n  totalRequests: z.number().nonnegative(),\n  totalTokens: z.number().nonnegative(),\n  totalCost: z.number().nonnegative(),\n  period: z.string(),\n});\n\nexport const CostAnalysisSchema = z.object({\n  customerId: z.string(),\n  totalCost: z.number().nonnegative(),\n  costByModel: z.record(z.string(), z.number().nonnegative()),\n  costByProvider: z.record(z.string(), z.number().nonnegative()),\n  costByFeature: z.record(z.string(), z.number().nonnegative()),\n  averageCostPerToken: z.number().nonnegative(),\n  costTrend: z.array(\n    z.object({\n      date: z.string(),\n      cost: z.number().nonnegative(),\n    })\n  ),\n  period: z.string(),\n});\n\nexport const UsagePatternSchema = z.object({\n  customerId: z.string(),\n  peakHours: z.array(z.number()),\n  peakDays: z.array(z.string()),\n  averageSessionLength: z.number().nonnegative(),\n  averageTokensPerSession: z.number().nonnegative(),\n  mostUsedModels: z.array(\n    z.object({\n      modelId: z.string(),\n      usage: z.number().nonnegative(),\n      cost: z.number().nonnegative(),\n    })\n  ),\n  featureUsage: z.record(z.string(), z.number().nonnegative()),\n});\n\n// ============================================================================\n// Type Exports\n// ============================================================================\n\nexport type TokenUsage = z.infer<typeof TokenUsageSchema>;\nexport type ModelPerformance = z.infer<typeof ModelPerformanceSchema>;\nexport type CostAnalysis = z.infer<typeof CostAnalysisSchema>;\nexport type UsagePattern = z.infer<typeof UsagePatternSchema>;\n\n// ============================================================================\n// AI Metrics Calculator\n// ============================================================================\n\nexport class AIMetricsCalculator {\n  constructor(private tokenUsages: TokenUsage[]) {}\n\n  calculateModelPerformance(modelId: string, period: string = 'month'): ModelPerformance {\n    const modelUsages = this.tokenUsages.filter(usage => usage.modelId === modelId);\n    const periodUsages = this.filterByPeriod(modelUsages, period);\n\n    if (periodUsages.length === 0) {\n      return {\n        modelId,\n        provider: '',\n        averageLatency: 0,\n        successRate: 0,\n        errorRate: 0,\n        totalRequests: 0,\n        totalTokens: 0,\n        totalCost: 0,\n        period,\n      };\n    }\n\n    const totalTokens = periodUsages.reduce((sum, usage) => sum + usage.totalTokens, 0);\n    const totalCost = periodUsages.reduce((sum, usage) => sum + usage.cost, 0);\n    const totalRequests = periodUsages.length;\n\n    return {\n      modelId,\n      provider: periodUsages[0]?.provider || '',\n      averageLatency: this.calculateAverageLatency(periodUsages),\n      successRate: this.calculateSuccessRate(periodUsages),\n      errorRate: this.calculateErrorRate(periodUsages),\n      totalRequests,\n      totalTokens,\n      totalCost,\n      period,\n    };\n  }\n\n  calculateCostAnalysis(customerId: string, period: string = 'month'): CostAnalysis {\n    const customerUsages = this.tokenUsages.filter(usage => usage.customerId === customerId);\n    const periodUsages = this.filterByPeriod(customerUsages, period);\n\n    const totalCost = periodUsages.reduce((sum, usage) => sum + usage.cost, 0);\n\n    const costByModel = this.groupBy(periodUsages, 'modelId', 'cost');\n    const costByProvider = this.groupBy(periodUsages, 'provider', 'cost');\n    // AI usage doesn't have featureId - tracked by model instead\n    const costByFeature: Record<string, number> = {};\n\n    const averageCostPerToken =\n      totalCost / periodUsages.reduce((sum, usage) => sum + usage.totalTokens, 0);\n\n    const costTrend = this.calculateCostTrend(periodUsages);\n\n    return {\n      customerId,\n      totalCost,\n      costByModel,\n      costByProvider,\n      costByFeature,\n      averageCostPerToken,\n      costTrend,\n      period,\n    };\n  }\n\n  calculateUsagePatterns(customerId: string, period: string = 'month'): UsagePattern {\n    const customerUsages = this.tokenUsages.filter(usage => usage.customerId === customerId);\n    const periodUsages = this.filterByPeriod(customerUsages, period);\n\n    const peakHours = this.calculatePeakHours(periodUsages);\n    const peakDays = this.calculatePeakDays(periodUsages);\n    const averageSessionLength = this.calculateAverageSessionLength(periodUsages);\n    const averageTokensPerSession = this.calculateAverageTokensPerSession(periodUsages);\n\n    const mostUsedModels = this.calculateMostUsedModels(periodUsages);\n    // AI usage doesn't have featureId - tracked by model instead\n    const featureUsage: Record<string, number> = {};\n\n    return {\n      customerId,\n      peakHours,\n      peakDays,\n      averageSessionLength,\n      averageTokensPerSession,\n      mostUsedModels,\n      featureUsage,\n    };\n  }\n\n  // ============================================================================\n  // Private Helper Methods\n  // ============================================================================\n\n  private filterByPeriod(usages: TokenUsage[], period: string): TokenUsage[] {\n    const now = new Date();\n    const startDate = new Date();\n\n    switch (period) {\n      case 'day':\n        startDate.setDate(now.getDate() - 1);\n        break;\n      case 'week':\n        startDate.setDate(now.getDate() - 7);\n        break;\n      case 'month':\n        startDate.setMonth(now.getMonth() - 1);\n        break;\n      case 'year':\n        startDate.setFullYear(now.getFullYear() - 1);\n        break;\n    }\n\n    return usages.filter(usage => usage.timestamp >= startDate);\n  }\n\n  private calculateAverageLatency(_usages: TokenUsage[]): number {\n    // This would require latency data from the actual API calls\n    // For now, return a mock calculation\n    return 1500; // 1.5 seconds average\n  }\n\n  private calculateSuccessRate(_usages: TokenUsage[]): number {\n    // This would require success/error data from the actual API calls\n    // For now, return a mock calculation\n    return 0.95; // 95% success rate\n  }\n\n  private calculateErrorRate(usages: TokenUsage[]): number {\n    return 1 - this.calculateSuccessRate(usages);\n  }\n\n  private groupBy(\n    usages: TokenUsage[],\n    key: keyof TokenUsage,\n    valueKey: keyof TokenUsage\n  ): Record<string, number> {\n    const grouped: Record<string, number> = {};\n\n    usages.forEach(usage => {\n      const keyValue = usage[key] as string;\n      const value = usage[valueKey] as number;\n\n      if (!grouped[keyValue]) {\n        grouped[keyValue] = 0;\n      }\n      grouped[keyValue] += value;\n    });\n\n    return grouped;\n  }\n\n  private calculateCostTrend(usages: TokenUsage[]): Array<{ date: string; cost: number }> {\n    const dailyCosts: Record<string, number> = {};\n\n    usages.forEach(usage => {\n      const date = usage.timestamp.toISOString().split('T')[0];\n      if (date) {\n        if (!dailyCosts[date]) {\n          dailyCosts[date] = 0;\n        }\n        dailyCosts[date] += usage.cost;\n      }\n    });\n\n    return Object.entries(dailyCosts)\n      .map(([date, cost]) => ({ date, cost }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n  }\n\n  private calculatePeakHours(usages: TokenUsage[]): number[] {\n    const hourlyUsage: Record<number, number> = {};\n\n    usages.forEach(usage => {\n      const hour = usage.timestamp.getHours();\n      if (!hourlyUsage[hour]) {\n        hourlyUsage[hour] = 0;\n      }\n      hourlyUsage[hour] += usage.totalTokens;\n    });\n\n    return Object.entries(hourlyUsage)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 3)\n      .map(([hour]) => parseInt(hour));\n  }\n\n  private calculatePeakDays(usages: TokenUsage[]): string[] {\n    const dailyUsage: Record<string, number> = {};\n\n    usages.forEach(usage => {\n      const day = usage.timestamp.toLocaleDateString('en-US', { weekday: 'long' });\n      if (!dailyUsage[day]) {\n        dailyUsage[day] = 0;\n      }\n      dailyUsage[day] += usage.totalTokens;\n    });\n\n    return Object.entries(dailyUsage)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 3)\n      .map(([day]) => day);\n  }\n\n  private calculateAverageSessionLength(_usages: TokenUsage[]): number {\n    // This would require session data\n    // For now, return a mock calculation\n    return 30; // 30 minutes average\n  }\n\n  private calculateAverageTokensPerSession(usages: TokenUsage[]): number {\n    const sessionTokens: Record<string, number> = {};\n\n    usages.forEach(usage => {\n      const sessionId = usage.sessionId || 'default';\n      if (!sessionTokens[sessionId]) {\n        sessionTokens[sessionId] = 0;\n      }\n      sessionTokens[sessionId] += usage.totalTokens;\n    });\n\n    const totalSessions = Object.keys(sessionTokens).length;\n    const totalTokens = Object.values(sessionTokens).reduce((sum, tokens) => sum + tokens, 0);\n\n    return totalSessions > 0 ? totalTokens / totalSessions : 0;\n  }\n\n  private calculateMostUsedModels(\n    usages: TokenUsage[]\n  ): Array<{ modelId: string; usage: number; cost: number }> {\n    const modelUsage: Record<string, { usage: number; cost: number }> = {};\n\n    usages.forEach(usage => {\n      if (!modelUsage[usage.modelId]) {\n        modelUsage[usage.modelId] = { usage: 0, cost: 0 };\n      }\n      const modelData = modelUsage[usage.modelId];\n      if (modelData) {\n        modelData.usage += usage.totalTokens;\n        modelData.cost += usage.cost;\n      }\n    });\n\n    return Object.entries(modelUsage)\n      .map(([modelId, data]) => ({ modelId, ...data }))\n      .sort((a, b) => b.usage - a.usage)\n      .slice(0, 5);\n  }\n}\n\n// ============================================================================\n// AI Metrics Dashboard Data\n// ============================================================================\n\nexport interface AIMetricsDashboardData {\n  summary: {\n    totalTokens: number;\n    totalCost: number;\n    averageCostPerToken: number;\n    totalRequests: number;\n    averageLatency: number;\n    successRate: number;\n  };\n  modelPerformance: ModelPerformance[];\n  costAnalysis: CostAnalysis;\n  usagePatterns: UsagePattern;\n  trends: {\n    tokenGrowth: number;\n    costGrowth: number;\n    requestGrowth: number;\n  };\n}\n\nexport function generateAIMetricsDashboard(\n  tokenUsages: TokenUsage[],\n  customerId: string,\n  period: string = 'month'\n): AIMetricsDashboardData {\n  const calculator = new AIMetricsCalculator(tokenUsages);\n\n  const customerUsages = tokenUsages.filter(usage => usage.customerId === customerId);\n  const periodUsages = calculator['filterByPeriod'](customerUsages, period);\n\n  const totalTokens = periodUsages.reduce((sum, usage) => sum + usage.totalTokens, 0);\n  const totalCost = periodUsages.reduce((sum, usage) => sum + usage.cost, 0);\n  const totalRequests = periodUsages.length;\n\n  const uniqueModels = [...new Set(periodUsages.map(usage => usage.modelId))];\n  const modelPerformance = uniqueModels.map(modelId =>\n    calculator.calculateModelPerformance(modelId, period)\n  );\n\n  const costAnalysis = calculator.calculateCostAnalysis(customerId, period);\n  const usagePatterns = calculator.calculateUsagePatterns(customerId, period);\n\n  // Calculate trends (simplified)\n  const trends = {\n    tokenGrowth: 15.2, // Mock data\n    costGrowth: 12.8, // Mock data\n    requestGrowth: 8.5, // Mock data\n  };\n\n  return {\n    summary: {\n      totalTokens,\n      totalCost,\n      averageCostPerToken: totalTokens > 0 ? totalCost / totalTokens : 0,\n      totalRequests,\n      averageLatency:\n        modelPerformance.reduce((sum, perf) => sum + perf.averageLatency, 0) /\n        modelPerformance.length,\n      successRate:\n        modelPerformance.reduce((sum, perf) => sum + perf.successRate, 0) / modelPerformance.length,\n    },\n    modelPerformance,\n    costAnalysis,\n    usagePatterns,\n    trends,\n  };\n}\n","import {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n} from 'recharts';\n\n// ============================================================================\n// Customer Dashboard Components\n// ============================================================================\n\ninterface CustomerDashboardProps {\n  customerId: string;\n  data: {\n    usage: Array<{ date: string; usage: number; cost: number }>;\n    aiUsage: Array<{ date: string; tokens: number; cost: number }>;\n    topFeatures: Array<{ featureId: string; usage: number; cost: number }>;\n    topModels: Array<{ modelId: string; tokens: number; cost: number }>;\n    summary: {\n      totalUsage: number;\n      totalCost: number;\n      averageDailyUsage: number;\n    };\n  };\n}\n\nexport function CustomerDashboard({ data }: CustomerDashboardProps) {\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold text-gray-700\">Total Usage</h3>\n          <p className=\"text-3xl font-bold text-blue-600\">\n            {data.summary.totalUsage.toLocaleString()}\n          </p>\n          <p className=\"text-sm text-gray-500\">units this month</p>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold text-gray-700\">Total Cost</h3>\n          <p className=\"text-3xl font-bold text-green-600\">${data.summary.totalCost.toFixed(2)}</p>\n          <p className=\"text-sm text-gray-500\">this month</p>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold text-gray-700\">Daily Average</h3>\n          <p className=\"text-3xl font-bold text-purple-600\">\n            {data.summary.averageDailyUsage.toFixed(0)}\n          </p>\n          <p className=\"text-sm text-gray-500\">units per day</p>\n        </div>\n      </div>\n\n      {/* Usage Trends */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold mb-4\">Usage Trends</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={data.usage}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis />\n              <Tooltip />\n              <Line type=\"monotone\" dataKey=\"usage\" stroke=\"#8884d8\" strokeWidth={2} />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold mb-4\">AI Usage Trends</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={data.aiUsage}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis />\n              <Tooltip />\n              <Line type=\"monotone\" dataKey=\"tokens\" stroke=\"#82ca9d\" strokeWidth={2} />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Feature Usage Breakdown */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold mb-4\">Top Features</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={data.topFeatures}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"featureId\" />\n              <YAxis />\n              <Tooltip />\n              <Bar dataKey=\"usage\" fill=\"#8884d8\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold mb-4\">AI Model Usage</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={data.topModels}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                label={({ modelId, percent }) => `${modelId} ${(percent * 100).toFixed(0)}%`}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"tokens\"\n              >\n                {data.topModels.map((_, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// ============================================================================\n// Usage Meter Component\n// ============================================================================\n\ninterface UsageMeterProps {\n  current: number;\n  limit: number;\n  featureId: string;\n  resetAt: Date;\n}\n\nexport function UsageMeter({ current, limit, featureId, resetAt }: UsageMeterProps) {\n  const percentage = (current / limit) * 100;\n  const isNearLimit = percentage > 80;\n  const isOverLimit = percentage > 100;\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow\">\n      <div className=\"flex justify-between items-center mb-2\">\n        <h3 className=\"text-lg font-semibold\">{featureId}</h3>\n        <span\n          className={`text-sm font-medium ${isOverLimit ? 'text-red-600' : isNearLimit ? 'text-yellow-600' : 'text-green-600'}`}\n        >\n          {current.toLocaleString()} / {limit.toLocaleString()}\n        </span>\n      </div>\n\n      <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n        <div\n          className={`h-2.5 rounded-full ${\n            isOverLimit ? 'bg-red-500' : isNearLimit ? 'bg-yellow-500' : 'bg-green-500'\n          }`}\n          style={{ width: `${Math.min(percentage, 100)}%` }}\n        />\n      </div>\n\n      <div className=\"flex justify-between text-sm text-gray-500 mt-2\">\n        <span>Reset: {resetAt.toLocaleDateString()}</span>\n        <span>{percentage.toFixed(1)}% used</span>\n      </div>\n    </div>\n  );\n}\n\n// ============================================================================\n// AI Usage Dashboard\n// ============================================================================\n\ninterface AIUsageDashboardProps {\n  customerId: string;\n  data: {\n    totalTokens: number;\n    totalCost: number;\n    topModels: Array<{ modelId: string; tokens: number; cost: number }>;\n    dailyBreakdown: Array<{ date: string; tokens: number; cost: number }>;\n    hourlyBreakdown: Array<{ hour: number; tokens: number; cost: number }>;\n  };\n}\n\nexport function AIUsageDashboard({ data }: AIUsageDashboardProps) {\n  return (\n    <div className=\"space-y-6\">\n      {/* AI Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold text-gray-700\">Total Tokens</h3>\n          <p className=\"text-3xl font-bold text-blue-600\">{data.totalTokens.toLocaleString()}</p>\n          <p className=\"text-sm text-gray-500\">tokens processed</p>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold text-gray-700\">Total Cost</h3>\n          <p className=\"text-3xl font-bold text-green-600\">${data.totalCost.toFixed(2)}</p>\n          <p className=\"text-sm text-gray-500\">AI usage cost</p>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold text-gray-700\">Avg Cost/Token</h3>\n          <p className=\"text-3xl font-bold text-purple-600\">\n            ${(data.totalCost / data.totalTokens).toFixed(6)}\n          </p>\n          <p className=\"text-sm text-gray-500\">per token</p>\n        </div>\n      </div>\n\n      {/* AI Usage Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold mb-4\">Token Usage Over Time</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={data.dailyBreakdown}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis />\n              <Tooltip />\n              <Line type=\"monotone\" dataKey=\"tokens\" stroke=\"#8884d8\" strokeWidth={2} />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold mb-4\">Usage by Hour</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={data.hourlyBreakdown}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"hour\" />\n              <YAxis />\n              <Tooltip />\n              <Bar dataKey=\"tokens\" fill=\"#82ca9d\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// ============================================================================\n// Analytics Package Exports\n// ============================================================================\n\n// Usage Tracking\nexport * from './modules/usage-tracker';\n\n// AI Metrics\nexport * from './metrics/ai-metrics';\n\n// Dashboard Components\nexport * from './dashboards/customer-dashboard';\n\n// ============================================================================\n// Main Analytics Engine\n// ============================================================================\n\nimport { UsageTracker, RealTimeUsageMeter, UsageAnalyticsEngine } from './modules/usage-tracker';\n\nexport class CarnilAnalytics {\n  private usageTracker: UsageTracker;\n  private realTimeMeter: RealTimeUsageMeter;\n  private analyticsEngine: UsageAnalyticsEngine;\n\n  constructor(usageTracker: UsageTracker) {\n    this.usageTracker = usageTracker;\n    this.realTimeMeter = new RealTimeUsageMeter(usageTracker);\n    this.analyticsEngine = new UsageAnalyticsEngine(usageTracker);\n  }\n\n  // Usage tracking methods\n  async trackUsage(customerId: string, featureId: string, usage: number): Promise<boolean> {\n    return this.realTimeMeter.trackUsage(customerId, featureId, usage);\n  }\n\n  async trackAIUsage(\n    customerId: string,\n    modelId: string,\n    tokens: number,\n    cost: number\n  ): Promise<boolean> {\n    return this.realTimeMeter.trackAIUsage(customerId, modelId, tokens, cost);\n  }\n\n  // Analytics methods\n  async getCustomerReport(customerId: string, period: string = 'month') {\n    return this.analyticsEngine.generateCustomerReport(customerId, period);\n  }\n\n  async getUsageMetrics(customerId: string, featureId: string, period: string) {\n    return this.usageTracker.getUsageMetrics(customerId, featureId, period);\n  }\n\n  async getAIUsageMetrics(customerId: string, modelId?: string, period?: string) {\n    return this.usageTracker.getAIUsageMetrics(customerId, modelId, period);\n  }\n\n  // Credit and limit management\n  async getCreditBalance(customerId: string, featureId: string) {\n    return this.usageTracker.getCreditBalance(customerId, featureId);\n  }\n\n  async updateCreditBalance(customerId: string, featureId: string, amount: number) {\n    return this.usageTracker.updateCreditBalance(customerId, featureId, amount);\n  }\n\n  async setUsageLimit(customerId: string, limit: any) {\n    return this.usageTracker.setUsageLimit(customerId, limit);\n  }\n\n  async checkUsageAllowed(customerId: string, featureId: string, requiredUsage: number) {\n    return this.usageTracker.checkUsageAllowed(customerId, featureId, requiredUsage);\n  }\n}\n\n// ============================================================================\n// React Hooks for Analytics\n// ============================================================================\n\nimport { useState, useEffect } from 'react';\n\nexport function useAnalytics(customerId: string) {\n  const [analytics, setAnalytics] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // This would integrate with your actual analytics service\n    const fetchAnalytics = async () => {\n      try {\n        setLoading(true);\n        // Mock analytics data\n        const mockData = {\n          summary: {\n            totalUsage: 1250,\n            totalCost: 89.5,\n            averageDailyUsage: 42,\n          },\n          usage: [\n            { date: '2024-01-01', usage: 45, cost: 3.2 },\n            { date: '2024-01-02', usage: 52, cost: 3.7 },\n            { date: '2024-01-03', usage: 38, cost: 2.8 },\n          ],\n          aiUsage: [\n            { date: '2024-01-01', tokens: 1200, cost: 0.24 },\n            { date: '2024-01-02', tokens: 1500, cost: 0.3 },\n            { date: '2024-01-03', tokens: 980, cost: 0.2 },\n          ],\n          topFeatures: [\n            { featureId: 'api-calls', usage: 800, cost: 45.0 },\n            { featureId: 'ai-processing', usage: 450, cost: 44.5 },\n          ],\n          topModels: [\n            { modelId: 'gpt-4', tokens: 2000, cost: 0.4 },\n            { modelId: 'gpt-3.5-turbo', tokens: 1500, cost: 0.15 },\n          ],\n        };\n\n        setAnalytics(mockData);\n        setError(null);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch analytics');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (customerId) {\n      fetchAnalytics();\n    }\n  }, [customerId]);\n\n  return { analytics, loading, error };\n}\n\nexport function useUsageMeter(customerId: string, featureId: string) {\n  const [usage, setUsage] = useState({ current: 0, limit: 1000, resetAt: new Date() });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // This would integrate with your actual usage tracking service\n    const fetchUsage = async () => {\n      try {\n        setLoading(true);\n        // Mock usage data\n        const mockUsage = {\n          current: 750,\n          limit: 1000,\n          resetAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n        };\n\n        setUsage(mockUsage);\n      } catch (err) {\n        console.error('Failed to fetch usage data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (customerId && featureId) {\n      fetchUsage();\n    }\n  }, [customerId, featureId]);\n\n  return { usage, loading };\n}\n\n// ============================================================================\n// Default Export\n// ============================================================================\n\nexport default CarnilAnalytics;\n"]}