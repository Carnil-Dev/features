{"version":3,"sources":["../src/currencies/currency-manager.ts","../src/tax/tax-manager.ts","../src/localization/payment-methods.ts","../src/providers/adyen-provider.ts","../src/index.ts"],"names":["z","useState","useEffect"],"mappings":"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","file":"index.js","sourcesContent":["import { z } from 'zod';\n\n// ============================================================================\n// Currency Schemas\n// ============================================================================\n\nexport const CurrencySchema = z.object({\n  code: z.string().length(3), // ISO 4217 currency code\n  name: z.string(),\n  symbol: z.string(),\n  decimalPlaces: z.number().min(0).max(4),\n  isActive: z.boolean().default(true),\n  isSupported: z.boolean().default(true),\n  exchangeRate: z.number().positive().optional(),\n  lastUpdated: z.date().optional(),\n});\n\nexport const ExchangeRateSchema = z.object({\n  from: z.string().length(3),\n  to: z.string().length(3),\n  rate: z.number().positive(),\n  timestamp: z.date(),\n  provider: z.string(),\n  source: z.enum(['api', 'manual', 'cached']),\n});\n\nexport const CurrencyConversionSchema = z.object({\n  amount: z.number().nonnegative(),\n  fromCurrency: z.string().length(3),\n  toCurrency: z.string().length(3),\n  convertedAmount: z.number().nonnegative(),\n  exchangeRate: z.number().positive(),\n  timestamp: z.date(),\n  fees: z.number().nonnegative().default(0),\n  totalAmount: z.number().nonnegative(),\n});\n\n// ============================================================================\n// Type Exports\n// ============================================================================\n\nexport type Currency = z.infer<typeof CurrencySchema>;\nexport type ExchangeRate = z.infer<typeof ExchangeRateSchema>;\nexport type CurrencyConversion = z.infer<typeof CurrencyConversionSchema>;\n\n// ============================================================================\n// Currency Manager\n// ============================================================================\n\nexport class CurrencyManager {\n  private currencies: Map<string, Currency> = new Map();\n  private exchangeRates: Map<string, ExchangeRate> = new Map();\n\n  constructor() {\n    this.initializeDefaultCurrencies();\n  }\n\n  // ============================================================================\n  // Currency Management\n  // ============================================================================\n\n  addCurrency(currency: Currency): void {\n    this.currencies.set(currency.code, currency);\n  }\n\n  getCurrency(code: string): Currency | null {\n    return this.currencies.get(code.toUpperCase()) || null;\n  }\n\n  getAllCurrencies(): Currency[] {\n    return Array.from(this.currencies.values());\n  }\n\n  getSupportedCurrencies(): Currency[] {\n    return this.getAllCurrencies().filter(currency => currency.isSupported);\n  }\n\n  getActiveCurrencies(): Currency[] {\n    return this.getAllCurrencies().filter(currency => currency.isActive);\n  }\n\n  // ============================================================================\n  // Exchange Rate Management\n  // ============================================================================\n\n  async updateExchangeRates(provider: 'fixer' | 'exchangerate' | 'manual' = 'fixer'): Promise<void> {\n    try {\n      const rates = await this.fetchExchangeRates(provider);\n\n      for (const rate of rates) {\n        this.exchangeRates.set(`${rate.from}-${rate.to}`, rate);\n      }\n    } catch (error) {\n      console.error('Failed to update exchange rates:', error);\n      throw error;\n    }\n  }\n\n  getExchangeRate(from: string, to: string): ExchangeRate | null {\n    const key = `${from.toUpperCase()}-${to.toUpperCase()}`;\n    return this.exchangeRates.get(key) || null;\n  }\n\n  async convertCurrency(\n    amount: number,\n    fromCurrency: string,\n    toCurrency: string,\n    fees: number = 0\n  ): Promise<CurrencyConversion> {\n    if (fromCurrency.toUpperCase() === toCurrency.toUpperCase()) {\n      return {\n        amount,\n        fromCurrency: fromCurrency.toUpperCase(),\n        toCurrency: toCurrency.toUpperCase(),\n        convertedAmount: amount,\n        exchangeRate: 1,\n        timestamp: new Date(),\n        fees,\n        totalAmount: amount + fees,\n      };\n    }\n\n    const exchangeRate = this.getExchangeRate(fromCurrency, toCurrency);\n    \n    if (!exchangeRate) {\n      throw new Error(`Exchange rate not found for ${fromCurrency} to ${toCurrency}`);\n    }\n\n    const convertedAmount = amount * exchangeRate.rate;\n    const totalAmount = convertedAmount + fees;\n\n    return {\n      amount,\n      fromCurrency: fromCurrency.toUpperCase(),\n      toCurrency: toCurrency.toUpperCase(),\n      convertedAmount,\n      exchangeRate: exchangeRate.rate,\n      timestamp: exchangeRate.timestamp,\n      fees,\n      totalAmount,\n    };\n  }\n\n  // ============================================================================\n  // Currency Formatting\n  // ============================================================================\n\n  formatCurrency(\n    amount: number,\n    currencyCode: string,\n    locale: string = 'en-US'\n  ): string {\n    const currency = this.getCurrency(currencyCode);\n    if (!currency) {\n      throw new Error(`Currency ${currencyCode} not found`);\n    }\n\n    try {\n      return new Intl.NumberFormat(locale, {\n        style: 'currency',\n        currency: currencyCode,\n        minimumFractionDigits: currency.decimalPlaces,\n        maximumFractionDigits: currency.decimalPlaces,\n      }).format(amount);\n    } catch (error) {\n      // Fallback formatting\n      return `${currency.symbol}${amount.toFixed(currency.decimalPlaces)}`;\n    }\n  }\n\n  parseCurrencyAmount(formattedAmount: string, currencyCode: string): number {\n    const currency = this.getCurrency(currencyCode);\n    if (!currency) {\n      throw new Error(`Currency ${currencyCode} not found`);\n    }\n\n    // Remove currency symbol and parse\n    const cleanAmount = formattedAmount.replace(/[^\\d.,-]/g, '');\n    return parseFloat(cleanAmount.replace(',', '.'));\n  }\n\n  // ============================================================================\n  // Private Methods\n  // ============================================================================\n\n  private initializeDefaultCurrencies(): void {\n    const defaultCurrencies: Currency[] = [\n      {\n        code: 'USD',\n        name: 'US Dollar',\n        symbol: '$',\n        decimalPlaces: 2,\n        isActive: true,\n        isSupported: true,\n      },\n      {\n        code: 'EUR',\n        name: 'Euro',\n        symbol: '€',\n        decimalPlaces: 2,\n        isActive: true,\n        isSupported: true,\n      },\n      {\n        code: 'GBP',\n        name: 'British Pound',\n        symbol: '£',\n        decimalPlaces: 2,\n        isActive: true,\n        isSupported: true,\n      },\n      {\n        code: 'INR',\n        name: 'Indian Rupee',\n        symbol: '₹',\n        decimalPlaces: 2,\n        isActive: true,\n        isSupported: true,\n      },\n      {\n        code: 'CAD',\n        name: 'Canadian Dollar',\n        symbol: 'C$',\n        decimalPlaces: 2,\n        isActive: true,\n        isSupported: true,\n      },\n      {\n        code: 'AUD',\n        name: 'Australian Dollar',\n        symbol: 'A$',\n        decimalPlaces: 2,\n        isActive: true,\n        isSupported: true,\n      },\n      {\n        code: 'JPY',\n        name: 'Japanese Yen',\n        symbol: '¥',\n        decimalPlaces: 0,\n        isActive: true,\n        isSupported: true,\n      },\n      {\n        code: 'CNY',\n        name: 'Chinese Yuan',\n        symbol: '¥',\n        decimalPlaces: 2,\n        isActive: true,\n        isSupported: true,\n      },\n      {\n        code: 'BRL',\n        name: 'Brazilian Real',\n        symbol: 'R$',\n        decimalPlaces: 2,\n        isActive: true,\n        isSupported: true,\n      },\n      {\n        code: 'MXN',\n        name: 'Mexican Peso',\n        symbol: '$',\n        decimalPlaces: 2,\n        isActive: true,\n        isSupported: true,\n      },\n    ];\n\n    for (const currency of defaultCurrencies) {\n      this.addCurrency(currency);\n    }\n  }\n\n  private async fetchExchangeRates(provider: string): Promise<ExchangeRate[]> {\n    // This would integrate with real exchange rate APIs\n    // For now, return mock data\n    const mockRates: ExchangeRate[] = [\n      {\n        from: 'USD',\n        to: 'EUR',\n        rate: 0.85,\n        timestamp: new Date(),\n        provider,\n        source: 'api',\n      },\n      {\n        from: 'USD',\n        to: 'GBP',\n        rate: 0.73,\n        timestamp: new Date(),\n        provider,\n        source: 'api',\n      },\n      {\n        from: 'USD',\n        to: 'INR',\n        rate: 83.25,\n        timestamp: new Date(),\n        provider,\n        source: 'api',\n      },\n      {\n        from: 'USD',\n        to: 'CAD',\n        rate: 1.35,\n        timestamp: new Date(),\n        provider,\n        source: 'api',\n      },\n      {\n        from: 'USD',\n        to: 'AUD',\n        rate: 1.52,\n        timestamp: new Date(),\n        provider,\n        source: 'api',\n      },\n    ];\n\n    return mockRates;\n  }\n}\n\n// ============================================================================\n// Global Currency Manager Instance\n// ============================================================================\n\nexport const globalCurrencyManager = new CurrencyManager();\n","import { z } from 'zod';\n\n// ============================================================================\n// Tax Schemas\n// ============================================================================\n\nexport const TaxJurisdictionSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  country: z.string().length(2), // ISO 3166-1 alpha-2\n  region: z.string().optional(),\n  city: z.string().optional(),\n  postalCode: z.string().optional(),\n  taxId: z.string().optional(), // Tax ID for the jurisdiction\n  isActive: z.boolean().default(true),\n  metadata: z.record(z.string()).optional(),\n});\n\nexport const TaxRateSchema = z.object({\n  id: z.string(),\n  jurisdictionId: z.string(),\n  name: z.string(),\n  rate: z.number().min(0).max(1), // Decimal rate (0.1 = 10%)\n  type: z.enum(['vat', 'sales', 'gst', 'hst', 'pst', 'qst', 'custom']),\n  isInclusive: z.boolean().default(false), // Whether tax is included in price\n  isActive: z.boolean().default(true),\n  effectiveFrom: z.date(),\n  effectiveTo: z.date().optional(),\n  metadata: z.record(z.string()).optional(),\n});\n\nexport const TaxCalculationSchema = z.object({\n  subtotal: z.number().nonnegative(),\n  taxes: z.array(z.object({\n    jurisdictionId: z.string(),\n    taxRateId: z.string(),\n    name: z.string(),\n    rate: z.number().min(0).max(1),\n    amount: z.number().nonnegative(),\n    type: z.enum(['vat', 'sales', 'gst', 'hst', 'pst', 'qst', 'custom']),\n  })),\n  total: z.number().nonnegative(),\n  currency: z.string().length(3),\n  jurisdiction: z.string(),\n  calculatedAt: z.date(),\n});\n\nexport const TaxExemptionSchema = z.object({\n  customerId: z.string(),\n  jurisdictionId: z.string(),\n  exemptionType: z.enum(['business', 'nonprofit', 'government', 'educational', 'custom']),\n  exemptionNumber: z.string().optional(),\n  isActive: z.boolean().default(true),\n  validFrom: z.date(),\n  validTo: z.date().optional(),\n  metadata: z.record(z.string()).optional(),\n});\n\n// ============================================================================\n// Type Exports\n// ============================================================================\n\nexport type TaxJurisdiction = z.infer<typeof TaxJurisdictionSchema>;\nexport type TaxRate = z.infer<typeof TaxRateSchema>;\nexport type TaxCalculation = z.infer<typeof TaxCalculationSchema>;\nexport type TaxExemption = z.infer<typeof TaxExemptionSchema>;\n\n// ============================================================================\n// Tax Manager\n// ============================================================================\n\nexport class TaxManager {\n  private jurisdictions: Map<string, TaxJurisdiction> = new Map();\n  private taxRates: Map<string, TaxRate[]> = new Map();\n  private exemptions: Map<string, TaxExemption[]> = new Map();\n\n  constructor() {\n    this.initializeDefaultJurisdictions();\n  }\n\n  // ============================================================================\n  // Jurisdiction Management\n  // ============================================================================\n\n  addJurisdiction(jurisdiction: TaxJurisdiction): void {\n    this.jurisdictions.set(jurisdiction.id, jurisdiction);\n  }\n\n  getJurisdiction(id: string): TaxJurisdiction | null {\n    return this.jurisdictions.get(id) || null;\n  }\n\n  getJurisdictionsByCountry(country: string): TaxJurisdiction[] {\n    return Array.from(this.jurisdictions.values())\n      .filter(j => j.country === country.toUpperCase() && j.isActive);\n  }\n\n  findJurisdictionByLocation(location: {\n    country: string;\n    region?: string;\n    city?: string;\n    postalCode?: string;\n  }): TaxJurisdiction | null {\n    const { country, region, city, postalCode } = location;\n    \n    // Try to find exact match first\n    for (const jurisdiction of this.jurisdictions.values()) {\n      if (\n        jurisdiction.country === country.toUpperCase() &&\n        (!region || jurisdiction.region === region) &&\n        (!city || jurisdiction.city === city) &&\n        (!postalCode || jurisdiction.postalCode === postalCode)\n      ) {\n        return jurisdiction;\n      }\n    }\n\n    // Fallback to country-level jurisdiction\n    for (const jurisdiction of this.jurisdictions.values()) {\n      if (\n        jurisdiction.country === country.toUpperCase() &&\n        !jurisdiction.region &&\n        !jurisdiction.city &&\n        !jurisdiction.postalCode\n      ) {\n        return jurisdiction;\n      }\n    }\n\n    return null;\n  }\n\n  // ============================================================================\n  // Tax Rate Management\n  // ============================================================================\n\n  addTaxRate(taxRate: TaxRate): void {\n    const existing = this.taxRates.get(taxRate.jurisdictionId) || [];\n    this.taxRates.set(taxRate.jurisdictionId, [...existing, taxRate]);\n  }\n\n  getTaxRates(jurisdictionId: string, date: Date = new Date()): TaxRate[] {\n    const rates = this.taxRates.get(jurisdictionId) || [];\n    return rates.filter(rate => {\n      if (!rate.isActive) return false;\n      if (rate.effectiveFrom > date) return false;\n      if (rate.effectiveTo && rate.effectiveTo < date) return false;\n      return true;\n    });\n  }\n\n  getTaxRate(jurisdictionId: string, type: TaxRate['type'], date: Date = new Date()): TaxRate | null {\n    const rates = this.getTaxRates(jurisdictionId, date);\n    return rates.find(rate => rate.type === type) || null;\n  }\n\n  // ============================================================================\n  // Tax Calculation\n  // ============================================================================\n\n  calculateTax(\n    subtotal: number,\n    jurisdictionId: string,\n    customerId?: string,\n    date: Date = new Date()\n  ): TaxCalculation {\n    const jurisdiction = this.getJurisdiction(jurisdictionId);\n    if (!jurisdiction) {\n      throw new Error(`Jurisdiction ${jurisdictionId} not found`);\n    }\n\n    // Check for exemptions\n    if (customerId) {\n      const exemptions = this.getCustomerExemptions(customerId, jurisdictionId, date);\n      if (exemptions.length > 0) {\n        return {\n          subtotal,\n          taxes: [],\n          total: subtotal,\n          currency: 'USD', // This should come from the payment context\n          jurisdiction: jurisdiction.name,\n          calculatedAt: date,\n        };\n      }\n    }\n\n    const taxRates = this.getTaxRates(jurisdictionId, date);\n    const taxes = taxRates.map(rate => ({\n      jurisdictionId,\n      taxRateId: rate.id,\n      name: rate.name,\n      rate: rate.rate,\n      amount: subtotal * rate.rate,\n      type: rate.type,\n    }));\n\n    const totalTax = taxes.reduce((sum, tax) => sum + tax.amount, 0);\n    const total = subtotal + totalTax;\n\n    return {\n      subtotal,\n      taxes,\n      total,\n      currency: 'USD', // This should come from the payment context\n      jurisdiction: jurisdiction.name,\n      calculatedAt: date,\n    };\n  }\n\n  // ============================================================================\n  // Tax Exemption Management\n  // ============================================================================\n\n  addExemption(exemption: TaxExemption): void {\n    const existing = this.exemptions.get(exemption.customerId) || [];\n    this.exemptions.set(exemption.customerId, [...existing, exemption]);\n  }\n\n  getCustomerExemptions(\n    customerId: string,\n    jurisdictionId: string,\n    date: Date = new Date()\n  ): TaxExemption[] {\n    const exemptions = this.exemptions.get(customerId) || [];\n    return exemptions.filter(exemption => {\n      if (!exemption.isActive) return false;\n      if (exemption.jurisdictionId !== jurisdictionId) return false;\n      if (exemption.validFrom > date) return false;\n      if (exemption.validTo && exemption.validTo < date) return false;\n      return true;\n    });\n  }\n\n  // ============================================================================\n  // Tax Reporting\n  // ============================================================================\n\n  generateTaxReport(\n    jurisdictionId: string,\n    startDate: Date,\n    endDate: Date\n  ): {\n    jurisdiction: TaxJurisdiction;\n    totalSales: number;\n    totalTax: number;\n    taxBreakdown: Array<{\n      type: string;\n      rate: number;\n      amount: number;\n      sales: number;\n    }>;\n    period: { start: Date; end: Date };\n  } {\n    const jurisdiction = this.getJurisdiction(jurisdictionId);\n    if (!jurisdiction) {\n      throw new Error(`Jurisdiction ${jurisdictionId} not found`);\n    }\n\n    // This would integrate with actual transaction data\n    // For now, return mock data\n    const mockData = {\n      jurisdiction,\n      totalSales: 100000,\n      totalTax: 15000,\n      taxBreakdown: [\n        { type: 'VAT', rate: 0.15, amount: 15000, sales: 100000 },\n      ],\n      period: { start: startDate, end: endDate },\n    };\n\n    return mockData;\n  }\n\n  // ============================================================================\n  // Private Methods\n  // ============================================================================\n\n  private initializeDefaultJurisdictions(): void {\n    const defaultJurisdictions: TaxJurisdiction[] = [\n      {\n        id: 'us-federal',\n        name: 'United States Federal',\n        country: 'US',\n        isActive: true,\n      },\n      {\n        id: 'us-ca',\n        name: 'California',\n        country: 'US',\n        region: 'CA',\n        isActive: true,\n      },\n      {\n        id: 'us-ny',\n        name: 'New York',\n        country: 'US',\n        region: 'NY',\n        isActive: true,\n      },\n      {\n        id: 'us-tx',\n        name: 'Texas',\n        country: 'US',\n        region: 'TX',\n        isActive: true,\n      },\n      {\n        id: 'eu-germany',\n        name: 'Germany',\n        country: 'DE',\n        isActive: true,\n      },\n      {\n        id: 'eu-france',\n        name: 'France',\n        country: 'FR',\n        isActive: true,\n      },\n      {\n        id: 'eu-uk',\n        name: 'United Kingdom',\n        country: 'GB',\n        isActive: true,\n      },\n      {\n        id: 'in-india',\n        name: 'India',\n        country: 'IN',\n        isActive: true,\n      },\n      {\n        id: 'ca-canada',\n        name: 'Canada',\n        country: 'CA',\n        isActive: true,\n      },\n      {\n        id: 'au-australia',\n        name: 'Australia',\n        country: 'AU',\n        isActive: true,\n      },\n    ];\n\n    for (const jurisdiction of defaultJurisdictions) {\n      this.addJurisdiction(jurisdiction);\n    }\n\n    // Add default tax rates\n    this.initializeDefaultTaxRates();\n  }\n\n  private initializeDefaultTaxRates(): void {\n    const defaultTaxRates: TaxRate[] = [\n      // US Federal (no sales tax)\n      {\n        id: 'us-federal-sales',\n        jurisdictionId: 'us-federal',\n        name: 'Federal Sales Tax',\n        rate: 0,\n        type: 'sales',\n        isActive: true,\n        isInclusive: false,\n        effectiveFrom: new Date('2020-01-01'),\n      },\n      // California\n      {\n        id: 'us-ca-sales',\n        jurisdictionId: 'us-ca',\n        name: 'California Sales Tax',\n        rate: 0.0725,\n        type: 'sales',\n        isActive: true,\n        isInclusive: false,\n        effectiveFrom: new Date('2020-01-01'),\n      },\n      // New York\n      {\n        id: 'us-ny-sales',\n        jurisdictionId: 'us-ny',\n        name: 'New York Sales Tax',\n        rate: 0.08,\n        type: 'sales',\n        isActive: true,\n        isInclusive: false,\n        effectiveFrom: new Date('2020-01-01'),\n      },\n      // Texas\n      {\n        id: 'us-tx-sales',\n        jurisdictionId: 'us-tx',\n        name: 'Texas Sales Tax',\n        rate: 0.0625,\n        type: 'sales',\n        isActive: true,\n        isInclusive: false,\n        effectiveFrom: new Date('2020-01-01'),\n      },\n      // Germany\n      {\n        id: 'eu-germany-vat',\n        jurisdictionId: 'eu-germany',\n        name: 'German VAT',\n        rate: 0.19,\n        type: 'vat',\n        isActive: true,\n        isInclusive: true,\n        effectiveFrom: new Date('2020-01-01'),\n      },\n      // France\n      {\n        id: 'eu-france-vat',\n        jurisdictionId: 'eu-france',\n        name: 'French VAT',\n        rate: 0.20,\n        type: 'vat',\n        isActive: true,\n        isInclusive: true,\n        effectiveFrom: new Date('2020-01-01'),\n      },\n      // UK\n      {\n        id: 'eu-uk-vat',\n        jurisdictionId: 'eu-uk',\n        name: 'UK VAT',\n        rate: 0.20,\n        type: 'vat',\n        isActive: true,\n        isInclusive: true,\n        effectiveFrom: new Date('2020-01-01'),\n      },\n      // India\n      {\n        id: 'in-india-gst',\n        jurisdictionId: 'in-india',\n        name: 'Indian GST',\n        rate: 0.18,\n        type: 'gst',\n        isActive: true,\n        isInclusive: false,\n        effectiveFrom: new Date('2020-01-01'),\n      },\n      // Canada\n      {\n        id: 'ca-canada-gst',\n        jurisdictionId: 'ca-canada',\n        name: 'Canadian GST',\n        rate: 0.05,\n        type: 'gst',\n        isActive: true,\n        isInclusive: false,\n        effectiveFrom: new Date('2020-01-01'),\n      },\n      // Australia\n      {\n        id: 'au-australia-gst',\n        jurisdictionId: 'au-australia',\n        name: 'Australian GST',\n        rate: 0.10,\n        type: 'gst',\n        isActive: true,\n        isInclusive: false,\n        effectiveFrom: new Date('2020-01-01'),\n      },\n    ];\n\n    for (const taxRate of defaultTaxRates) {\n      this.addTaxRate(taxRate);\n    }\n  }\n}\n\n// ============================================================================\n// Global Tax Manager Instance\n// ============================================================================\n\nexport const globalTaxManager = new TaxManager();\n","import { z } from 'zod';\n\n// ============================================================================\n// Payment Method Schemas\n// ============================================================================\n\nexport const PaymentMethodSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  type: z.enum(['card', 'bank', 'wallet', 'upi', 'qr', 'cash', 'crypto', 'other']),\n  category: z.enum(['credit', 'debit', 'prepaid', 'bank_transfer', 'digital_wallet', 'crypto']),\n  isActive: z.boolean().default(true),\n  isSupported: z.boolean().default(true),\n  countries: z.array(z.string().length(2)), // ISO 3166-1 alpha-2\n  currencies: z.array(z.string().length(3)), // ISO 4217\n  minAmount: z.number().nonnegative().optional(),\n  maxAmount: z.number().positive().optional(),\n  fees: z.object({\n    fixed: z.number().nonnegative().default(0),\n    percentage: z.number().min(0).max(1).default(0), // Decimal rate\n  }),\n  processingTime: z.enum(['instant', 'minutes', 'hours', 'days']),\n  metadata: z.record(z.string()).optional(),\n});\n\nexport const LocalizedPaymentMethodSchema = z.object({\n  paymentMethodId: z.string(),\n  country: z.string().length(2),\n  currency: z.string().length(3),\n  displayName: z.string(),\n  description: z.string().optional(),\n  icon: z.string().optional(), // URL or icon identifier\n  isPopular: z.boolean().default(false),\n  isRecommended: z.boolean().default(false),\n  sortOrder: z.number().default(0),\n  metadata: z.record(z.string()).optional(),\n});\n\nexport const PaymentMethodAvailabilitySchema = z.object({\n  country: z.string().length(2),\n  currency: z.string().length(3),\n  availableMethods: z.array(z.string()),\n  popularMethods: z.array(z.string()),\n  recommendedMethods: z.array(z.string()),\n  lastUpdated: z.date(),\n});\n\n// ============================================================================\n// Type Exports\n// ============================================================================\n\nexport type PaymentMethod = z.infer<typeof PaymentMethodSchema>;\nexport type LocalizedPaymentMethod = z.infer<typeof LocalizedPaymentMethodSchema>;\nexport type PaymentMethodAvailability = z.infer<typeof PaymentMethodAvailabilitySchema>;\n\n// ============================================================================\n// Payment Method Manager\n// ============================================================================\n\nexport class PaymentMethodManager {\n  private paymentMethods: Map<string, PaymentMethod> = new Map();\n  private localizedMethods: Map<string, LocalizedPaymentMethod[]> = new Map();\n  private availability: Map<string, PaymentMethodAvailability> = new Map();\n\n  constructor() {\n    this.initializeDefaultPaymentMethods();\n    this.initializeLocalizedMethods();\n  }\n\n  // ============================================================================\n  // Payment Method Management\n  // ============================================================================\n\n  addPaymentMethod(paymentMethod: PaymentMethod): void {\n    this.paymentMethods.set(paymentMethod.id, paymentMethod);\n  }\n\n  getPaymentMethod(id: string): PaymentMethod | null {\n    return this.paymentMethods.get(id) || null;\n  }\n\n  getAllPaymentMethods(): PaymentMethod[] {\n    return Array.from(this.paymentMethods.values());\n  }\n\n  getSupportedPaymentMethods(country: string, currency: string): PaymentMethod[] {\n    return this.getAllPaymentMethods().filter(method => {\n      if (!method.isSupported || !method.isActive) return false;\n      if (!method.countries.includes(country.toUpperCase())) return false;\n      if (!method.currencies.includes(currency.toUpperCase())) return false;\n      return true;\n    });\n  }\n\n  // ============================================================================\n  // Localized Payment Methods\n  // ============================================================================\n\n  getLocalizedPaymentMethods(country: string, currency: string): LocalizedPaymentMethod[] {\n    const key = `${country.toUpperCase()}-${currency.toUpperCase()}`;\n    return this.localizedMethods.get(key) || [];\n  }\n\n  getPopularPaymentMethods(country: string, currency: string): LocalizedPaymentMethod[] {\n    return this.getLocalizedPaymentMethods(country, currency)\n      .filter(method => method.isPopular)\n      .sort((a, b) => a.sortOrder - b.sortOrder);\n  }\n\n  getRecommendedPaymentMethods(country: string, currency: string): LocalizedPaymentMethod[] {\n    return this.getLocalizedPaymentMethods(country, currency)\n      .filter(method => method.isRecommended)\n      .sort((a, b) => a.sortOrder - b.sortOrder);\n  }\n\n  // ============================================================================\n  // Payment Method Availability\n  // ============================================================================\n\n  getPaymentMethodAvailability(country: string, currency: string): PaymentMethodAvailability | null {\n    const key = `${country.toUpperCase()}-${currency.toUpperCase()}`;\n    return this.availability.get(key) || null;\n  }\n\n  updatePaymentMethodAvailability(\n    country: string,\n    currency: string,\n    availability: PaymentMethodAvailability\n  ): void {\n    const key = `${country.toUpperCase()}-${currency.toUpperCase()}`;\n    this.availability.set(key, availability);\n  }\n\n  // ============================================================================\n  // Payment Method Selection\n  // ============================================================================\n\n  getBestPaymentMethods(\n    country: string,\n    currency: string,\n    amount: number,\n    preferences?: {\n      instant?: boolean;\n      lowFees?: boolean;\n      popular?: boolean;\n    }\n  ): LocalizedPaymentMethod[] {\n    const methods = this.getLocalizedPaymentMethods(country, currency);\n    \n    // Filter by amount constraints\n    const validMethods = methods.filter(method => {\n      const paymentMethod = this.getPaymentMethod(method.paymentMethodId);\n      if (!paymentMethod) return false;\n      \n      if (paymentMethod.minAmount && amount < paymentMethod.minAmount) return false;\n      if (paymentMethod.maxAmount && amount > paymentMethod.maxAmount) return false;\n      \n      return true;\n    });\n\n    // Sort by preferences\n    return validMethods.sort((a, b) => {\n      const methodA = this.getPaymentMethod(a.paymentMethodId)!;\n      const methodB = this.getPaymentMethod(b.paymentMethodId)!;\n\n      // Prefer instant payments\n      if (preferences?.instant) {\n        if (methodA.processingTime === 'instant' && methodB.processingTime !== 'instant') return -1;\n        if (methodB.processingTime === 'instant' && methodA.processingTime !== 'instant') return 1;\n      }\n\n      // Prefer low fees\n      if (preferences?.lowFees) {\n        const feeA = methodA.fees.fixed + (amount * methodA.fees.percentage);\n        const feeB = methodB.fees.fixed + (amount * methodB.fees.percentage);\n        if (feeA !== feeB) return feeA - feeB;\n      }\n\n      // Prefer popular methods\n      if (preferences?.popular) {\n        if (a.isPopular && !b.isPopular) return -1;\n        if (b.isPopular && !a.isPopular) return 1;\n      }\n\n      // Default sort by order\n      return a.sortOrder - b.sortOrder;\n    });\n  }\n\n  // ============================================================================\n  // Fee Calculation\n  // ============================================================================\n\n  calculatePaymentMethodFees(\n    paymentMethodId: string,\n    amount: number\n  ): { fixed: number; percentage: number; total: number } {\n    const paymentMethod = this.getPaymentMethod(paymentMethodId);\n    if (!paymentMethod) {\n      throw new Error(`Payment method ${paymentMethodId} not found`);\n    }\n\n    const fixed = paymentMethod.fees.fixed;\n    const percentage = amount * paymentMethod.fees.percentage;\n    const total = fixed + percentage;\n\n    return { fixed, percentage, total };\n  }\n\n  // ============================================================================\n  // Private Methods\n  // ============================================================================\n\n  private initializeDefaultPaymentMethods(): void {\n    const defaultMethods: PaymentMethod[] = [\n      // Credit Cards\n      {\n        id: 'visa',\n        name: 'Visa',\n        type: 'card',\n        category: 'credit',\n        isActive: true,\n        isSupported: true,\n        countries: ['US', 'CA', 'GB', 'DE', 'FR', 'AU', 'IN', 'BR', 'MX'],\n        currencies: ['USD', 'CAD', 'GBP', 'EUR', 'AUD', 'INR', 'BRL', 'MXN'],\n        fees: { fixed: 0.30, percentage: 0.029 },\n        processingTime: 'instant',\n      },\n      {\n        id: 'mastercard',\n        name: 'Mastercard',\n        type: 'card',\n        category: 'credit',\n        isActive: true,\n        isSupported: true,\n        countries: ['US', 'CA', 'GB', 'DE', 'FR', 'AU', 'IN', 'BR', 'MX'],\n        currencies: ['USD', 'CAD', 'GBP', 'EUR', 'AUD', 'INR', 'BRL', 'MXN'],\n        fees: { fixed: 0.30, percentage: 0.029 },\n        processingTime: 'instant',\n      },\n      {\n        id: 'amex',\n        name: 'American Express',\n        type: 'card',\n        category: 'credit',\n        isActive: true,\n        isSupported: true,\n        countries: ['US', 'CA', 'GB', 'AU', 'IN'],\n        currencies: ['USD', 'CAD', 'GBP', 'AUD', 'INR'],\n        fees: { fixed: 0.30, percentage: 0.035 },\n        processingTime: 'instant',\n      },\n      // UPI (India)\n      {\n        id: 'upi',\n        name: 'UPI',\n        type: 'upi',\n        category: 'digital_wallet',\n        isActive: true,\n        isSupported: true,\n        countries: ['IN'],\n        currencies: ['INR'],\n        fees: { fixed: 0, percentage: 0 },\n        processingTime: 'instant',\n      },\n      // PayPal\n      {\n        id: 'paypal',\n        name: 'PayPal',\n        type: 'wallet',\n        category: 'digital_wallet',\n        isActive: true,\n        isSupported: true,\n        countries: ['US', 'CA', 'GB', 'DE', 'FR', 'AU', 'BR', 'MX'],\n        currencies: ['USD', 'CAD', 'GBP', 'EUR', 'AUD', 'BRL', 'MXN'],\n        fees: { fixed: 0.30, percentage: 0.034 },\n        processingTime: 'instant',\n      },\n      // Apple Pay\n      {\n        id: 'apple_pay',\n        name: 'Apple Pay',\n        type: 'wallet',\n        category: 'digital_wallet',\n        isActive: true,\n        isSupported: true,\n        countries: ['US', 'CA', 'GB', 'DE', 'FR', 'AU', 'IN', 'BR', 'MX'],\n        currencies: ['USD', 'CAD', 'GBP', 'EUR', 'AUD', 'INR', 'BRL', 'MXN'],\n        fees: { fixed: 0.30, percentage: 0.029 },\n        processingTime: 'instant',\n      },\n      // Google Pay\n      {\n        id: 'google_pay',\n        name: 'Google Pay',\n        type: 'wallet',\n        category: 'digital_wallet',\n        isActive: true,\n        isSupported: true,\n        countries: ['US', 'CA', 'GB', 'DE', 'FR', 'AU', 'IN', 'BR', 'MX'],\n        currencies: ['USD', 'CAD', 'GBP', 'EUR', 'AUD', 'INR', 'BRL', 'MXN'],\n        fees: { fixed: 0.30, percentage: 0.029 },\n        processingTime: 'instant',\n      },\n      // Bank Transfer\n      {\n        id: 'bank_transfer',\n        name: 'Bank Transfer',\n        type: 'bank',\n        category: 'bank_transfer',\n        isActive: true,\n        isSupported: true,\n        countries: ['US', 'CA', 'GB', 'DE', 'FR', 'AU', 'IN', 'BR', 'MX'],\n        currencies: ['USD', 'CAD', 'GBP', 'EUR', 'AUD', 'INR', 'BRL', 'MXN'],\n        fees: { fixed: 0, percentage: 0 },\n        processingTime: 'days',\n      },\n    ];\n\n    for (const method of defaultMethods) {\n      this.addPaymentMethod(method);\n    }\n  }\n\n  private initializeLocalizedMethods(): void {\n    // US - USD\n    this.localizedMethods.set('US-USD', [\n      {\n        paymentMethodId: 'visa',\n        country: 'US',\n        currency: 'USD',\n        displayName: 'Visa',\n        description: 'Pay with your Visa card',\n        isPopular: true,\n        isRecommended: true,\n        sortOrder: 1,\n      },\n      {\n        paymentMethodId: 'mastercard',\n        country: 'US',\n        currency: 'USD',\n        displayName: 'Mastercard',\n        description: 'Pay with your Mastercard',\n        isPopular: true,\n        isRecommended: true,\n        sortOrder: 2,\n      },\n      {\n        paymentMethodId: 'amex',\n        country: 'US',\n        currency: 'USD',\n        displayName: 'American Express',\n        description: 'Pay with your Amex card',\n        isPopular: false,\n        isRecommended: false,\n        sortOrder: 3,\n      },\n      {\n        paymentMethodId: 'apple_pay',\n        country: 'US',\n        currency: 'USD',\n        displayName: 'Apple Pay',\n        description: 'Pay with Apple Pay',\n        isPopular: true,\n        isRecommended: true,\n        sortOrder: 4,\n      },\n      {\n        paymentMethodId: 'google_pay',\n        country: 'US',\n        currency: 'USD',\n        displayName: 'Google Pay',\n        description: 'Pay with Google Pay',\n        isPopular: true,\n        isRecommended: true,\n        sortOrder: 5,\n      },\n      {\n        paymentMethodId: 'paypal',\n        country: 'US',\n        currency: 'USD',\n        displayName: 'PayPal',\n        description: 'Pay with PayPal',\n        isPopular: true,\n        isRecommended: false,\n        sortOrder: 6,\n      },\n    ]);\n\n    // India - INR\n    this.localizedMethods.set('IN-INR', [\n      {\n        paymentMethodId: 'upi',\n        country: 'IN',\n        currency: 'INR',\n        displayName: 'UPI',\n        description: 'Pay with UPI',\n        isPopular: true,\n        isRecommended: true,\n        sortOrder: 1,\n      },\n      {\n        paymentMethodId: 'visa',\n        country: 'IN',\n        currency: 'INR',\n        displayName: 'Visa',\n        description: 'Pay with your Visa card',\n        isPopular: true,\n        isRecommended: true,\n        sortOrder: 2,\n      },\n      {\n        paymentMethodId: 'mastercard',\n        country: 'IN',\n        currency: 'INR',\n        displayName: 'Mastercard',\n        description: 'Pay with your Mastercard',\n        isPopular: true,\n        isRecommended: true,\n        sortOrder: 3,\n      },\n      {\n        paymentMethodId: 'google_pay',\n        country: 'IN',\n        currency: 'INR',\n        displayName: 'Google Pay',\n        description: 'Pay with Google Pay',\n        isPopular: true,\n        isRecommended: true,\n        sortOrder: 4,\n      },\n    ]);\n\n    // Add more localized methods for other countries...\n  }\n}\n\n// ============================================================================\n// Global Payment Method Manager Instance\n// ============================================================================\n\nexport const globalPaymentMethodManager = new PaymentMethodManager();\n","import { z } from 'zod';\nimport { PaymentProvider } from '@carnil/core';\n\n// ============================================================================\n// Adyen Provider Schemas\n// ============================================================================\n\nexport const AdyenConfigSchema = z.object({\n  apiKey: z.string(),\n  merchantAccount: z.string(),\n  environment: z.enum(['test', 'live']).default('test'),\n  clientKey: z.string().optional(),\n  webhookSecret: z.string().optional(),\n  region: z.enum(['EU', 'US', 'AU', 'APSE']).default('EU'),\n});\n\nexport const AdyenPaymentMethodSchema = z.object({\n  type: z.string(),\n  name: z.string(),\n  isSupported: z.boolean(),\n  countries: z.array(z.string()),\n  currencies: z.array(z.string()),\n  metadata: z.record(z.string()).optional(),\n});\n\n// ============================================================================\n// Type Exports\n// ============================================================================\n\nexport type AdyenConfig = z.infer<typeof AdyenConfigSchema>;\nexport type AdyenPaymentMethod = z.infer<typeof AdyenPaymentMethodSchema>;\n\n// ============================================================================\n// Adyen Provider Implementation\n// ============================================================================\n\nexport class AdyenProvider implements PaymentProvider {\n  public name = 'adyen';\n  private apiClient: any; // Adyen API client\n\n  constructor(config: AdyenConfig) {\n    AdyenConfigSchema.parse(config); // Validate config\n    this.initializeApiClient();\n  }\n\n  // ============================================================================\n  // Provider Interface Implementation\n  // ============================================================================\n\n  async init(config: Record<string, any>): Promise<void> {\n    AdyenConfigSchema.parse(config); // Validate config\n    this.initializeApiClient();\n  }\n\n  // ============================================================================\n  // Customer Management\n  // ============================================================================\n\n  async createCustomer(params: any): Promise<any> {\n    // Adyen doesn't have a direct customer concept\n    // We'll use shopper reference as customer ID\n    const shopperReference = params.id || `customer_${Date.now()}`;\n\n    return {\n      id: shopperReference,\n      email: params.email,\n      name: params.name,\n      metadata: params.metadata || {},\n      created: new Date().toISOString(),\n    };\n  }\n\n  async retrieveCustomer(_params: any): Promise<any> {\n    // Adyen doesn't store customer data directly\n    // Return customer data from your own database\n    throw new Error(\n      'Adyen does not support customer retrieval. Store customer data in your own database.'\n    );\n  }\n\n  async updateCustomer(_id: string, _params: any): Promise<any> {\n    // Adyen doesn't support customer updates\n    // Update customer data in your own database\n    throw new Error(\n      'Adyen does not support customer updates. Update customer data in your own database.'\n    );\n  }\n\n  async deleteCustomer(_id: string): Promise<void> {\n    // Adyen doesn't support customer deletion\n    // Delete customer data from your own database\n    throw new Error(\n      'Adyen does not support customer deletion. Delete customer data from your own database.'\n    );\n  }\n\n  async listCustomers(_params?: any): Promise<any[]> {\n    // Adyen doesn't support customer listing\n    // List customers from your own database\n    throw new Error(\n      'Adyen does not support customer listing. List customers from your own database.'\n    );\n  }\n\n  // ============================================================================\n  // Payment Methods\n  // ============================================================================\n\n  async createPaymentMethod(_params: any): Promise<any> {\n    // Adyen handles payment methods differently\n    // This would typically be handled during payment creation\n    throw new Error(\n      'Adyen handles payment methods during payment creation. Use createPaymentIntent instead.'\n    );\n  }\n\n  async retrievePaymentMethod(_params: any): Promise<any> {\n    throw new Error('Adyen does not support payment method retrieval.');\n  }\n\n  async updatePaymentMethod(_id: string, _params: any): Promise<any> {\n    throw new Error('Adyen does not support payment method updates.');\n  }\n\n  async deletePaymentMethod(_id: string): Promise<void> {\n    throw new Error('Adyen does not support payment method deletion.');\n  }\n\n  async listPaymentMethods(_params?: any): Promise<any[]> {\n    throw new Error('Adyen does not support payment method listing.');\n  }\n\n  // ============================================================================\n  // Payment Intents\n  // ============================================================================\n\n  async createPaymentIntent(params: any): Promise<any> {\n    const paymentRequest = {\n      amount: {\n        currency: params.currency || 'USD',\n        value: params.amount || 0,\n      },\n      reference: params.id || `payment_${Date.now()}`,\n      paymentMethod: params.paymentMethod || {},\n      returnUrl: params.returnUrl,\n      shopperReference: params.customer,\n      metadata: params.metadata || {},\n    };\n\n    try {\n      const response = await this.apiClient.payments(paymentRequest);\n\n      return {\n        id: response.pspReference,\n        amount: params.amount,\n        currency: params.currency,\n        status: this.mapPaymentStatus(response.resultCode),\n        clientSecret: response.clientSecret,\n        paymentMethod: response.paymentMethod,\n        metadata: response.metadata,\n        created: new Date().toISOString(),\n      };\n    } catch (error: unknown) {\n      const message = error instanceof Error ? error.message : String(error);\n      throw new Error(`Adyen payment creation failed: ${message}`);\n    }\n  }\n\n  async retrievePaymentIntent(params: any): Promise<any> {\n    try {\n      const response = await this.apiClient.payments.get(params.id);\n\n      return {\n        id: response.pspReference,\n        amount: response.amount.value,\n        currency: response.amount.currency,\n        status: this.mapPaymentStatus(response.resultCode),\n        paymentMethod: response.paymentMethod,\n        metadata: response.metadata,\n        created: response.createdAt,\n      };\n    } catch (error: unknown) {\n      const message = error instanceof Error ? error.message : String(error);\n      throw new Error(`Adyen payment retrieval failed: ${message}`);\n    }\n  }\n\n  async updatePaymentIntent(_id: string, _params: any): Promise<any> {\n    // Adyen doesn't support payment updates\n    throw new Error('Adyen does not support payment updates.');\n  }\n\n  async cancelPaymentIntent(id: string): Promise<any> {\n    try {\n      const response = await this.apiClient.payments.cancel({\n        originalReference: id,\n      });\n\n      return {\n        id: response.pspReference,\n        status: 'cancelled',\n        cancelled: new Date().toISOString(),\n      };\n    } catch (error: unknown) {\n      const message = error instanceof Error ? error.message : String(error);\n      throw new Error(`Adyen payment cancellation failed: ${message}`);\n    }\n  }\n\n  async listPaymentIntents(_params?: any): Promise<any[]> {\n    // Adyen doesn't support payment listing\n    throw new Error('Adyen does not support payment listing.');\n  }\n\n  // ============================================================================\n  // Subscriptions\n  // ============================================================================\n\n  async createSubscription(_params: any): Promise<any> {\n    // Adyen doesn't have native subscriptions\n    // Implement using recurring payments\n    throw new Error(\n      'Adyen does not support native subscriptions. Implement using recurring payments.'\n    );\n  }\n\n  async retrieveSubscription(_params: any): Promise<any> {\n    throw new Error('Adyen does not support subscription retrieval.');\n  }\n\n  async updateSubscription(_id: string, _params: any): Promise<any> {\n    throw new Error('Adyen does not support subscription updates.');\n  }\n\n  async cancelSubscription(_id: string): Promise<any> {\n    throw new Error('Adyen does not support subscription cancellation.');\n  }\n\n  async listSubscriptions(_params?: any): Promise<any[]> {\n    throw new Error('Adyen does not support subscription listing.');\n  }\n\n  // ============================================================================\n  // Invoices\n  // ============================================================================\n\n  async retrieveInvoice(_params: any): Promise<any> {\n    throw new Error('Adyen does not support invoice retrieval.');\n  }\n\n  async listInvoices(_params?: any): Promise<any[]> {\n    throw new Error('Adyen does not support invoice listing.');\n  }\n\n  // ============================================================================\n  // Refunds\n  // ============================================================================\n\n  async createRefund(params: any): Promise<any> {\n    try {\n      const response = await this.apiClient.payments.refund({\n        originalReference: params.payment,\n        amount: {\n          currency: params.currency,\n          value: params.amount,\n        },\n        reference: params.id || `refund_${Date.now()}`,\n      });\n\n      return {\n        id: response.pspReference,\n        payment: params.payment,\n        amount: params.amount,\n        currency: params.currency,\n        status: this.mapRefundStatus(response.resultCode),\n        created: new Date().toISOString(),\n      };\n    } catch (error: unknown) {\n      const message = error instanceof Error ? error.message : String(error);\n      throw new Error(`Adyen refund creation failed: ${message}`);\n    }\n  }\n\n  async retrieveRefund(params: any): Promise<any> {\n    try {\n      const response = await this.apiClient.payments.get(params.id);\n\n      return {\n        id: response.pspReference,\n        payment: response.originalReference,\n        amount: response.amount.value,\n        currency: response.amount.currency,\n        status: this.mapRefundStatus(response.resultCode),\n        created: response.createdAt,\n      };\n    } catch (error: unknown) {\n      const message = error instanceof Error ? error.message : String(error);\n      throw new Error(`Adyen refund retrieval failed: ${message}`);\n    }\n  }\n\n  async listRefunds(_params?: any): Promise<any[]> {\n    throw new Error('Adyen does not support refund listing.');\n  }\n\n  // ============================================================================\n  // Disputes\n  // ============================================================================\n\n  async retrieveDispute(_params: any): Promise<any> {\n    throw new Error('Adyen does not support dispute retrieval.');\n  }\n\n  async listDisputes(_params?: any): Promise<any[]> {\n    throw new Error('Adyen does not support dispute listing.');\n  }\n\n  // ============================================================================\n  // Products and Prices\n  // ============================================================================\n\n  async createProduct(_params: any): Promise<any> {\n    throw new Error('Adyen does not support product creation.');\n  }\n\n  async retrieveProduct(_params: any): Promise<any> {\n    throw new Error('Adyen does not support product retrieval.');\n  }\n\n  async updateProduct(_id: string, _params: any): Promise<any> {\n    throw new Error('Adyen does not support product updates.');\n  }\n\n  async listProducts(_params?: any): Promise<any[]> {\n    throw new Error('Adyen does not support product listing.');\n  }\n\n  async createPrice(_params: any): Promise<any> {\n    throw new Error('Adyen does not support price creation.');\n  }\n\n  async retrievePrice(_params: any): Promise<any> {\n    throw new Error('Adyen does not support price retrieval.');\n  }\n\n  async updatePrice(_id: string, _params: any): Promise<any> {\n    throw new Error('Adyen does not support price updates.');\n  }\n\n  async listPrices(_params?: any): Promise<any[]> {\n    throw new Error('Adyen does not support price listing.');\n  }\n\n  // ============================================================================\n  // Webhook Handling\n  // ============================================================================\n\n  async verifyWebhook(_payload: string, _signature: string): Promise<boolean> {\n    // Implement Adyen webhook signature verification\n    // This would use Adyen's webhook signature verification\n    return true; // Simplified for now\n  }\n\n  async parseWebhook(payload: string): Promise<any> {\n    try {\n      const event = JSON.parse(payload);\n      return {\n        id: event.pspReference,\n        type: this.mapWebhookEventType(event.eventCode),\n        data: event,\n        created: new Date().toISOString(),\n      };\n    } catch (error: unknown) {\n      const message = error instanceof Error ? error.message : String(error);\n      throw new Error(`Adyen webhook parsing failed: ${message}`);\n    }\n  }\n\n  // ============================================================================\n  // Private Methods\n  // ============================================================================\n\n  private initializeApiClient(): void {\n    // Initialize Adyen API client\n    // This would use the official Adyen SDK\n    this.apiClient = {\n      payments: {\n        async(paymentRequest: any) {\n          // Mock Adyen payment creation\n          return {\n            pspReference: `psp_${Date.now()}`,\n            resultCode: 'Authorised',\n            clientSecret: `client_secret_${Date.now()}`,\n            paymentMethod: paymentRequest.paymentMethod,\n            metadata: paymentRequest.metadata,\n          };\n        },\n        get: async (reference: string) => {\n          // Mock Adyen payment retrieval\n          return {\n            pspReference: reference,\n            resultCode: 'Authorised',\n            amount: { value: 1000, currency: 'USD' },\n            paymentMethod: {},\n            metadata: {},\n            createdAt: new Date().toISOString(),\n          };\n        },\n        cancel: async (_cancelRequest: any) => {\n          // Mock Adyen payment cancellation\n          return {\n            pspReference: `psp_${Date.now()}`,\n            resultCode: 'Cancelled',\n          };\n        },\n        refund: async (_refundRequest: any) => {\n          // Mock Adyen refund creation\n          return {\n            pspReference: `psp_${Date.now()}`,\n            resultCode: 'Received',\n          };\n        },\n      },\n    };\n  }\n\n  private mapPaymentStatus(resultCode: string): string {\n    const statusMap: Record<string, string> = {\n      Authorised: 'succeeded',\n      Refused: 'failed',\n      Cancelled: 'cancelled',\n      Pending: 'processing',\n      Received: 'processing',\n    };\n\n    return statusMap[resultCode] || 'unknown';\n  }\n\n  private mapRefundStatus(resultCode: string): string {\n    const statusMap: Record<string, string> = {\n      Received: 'processing',\n      Authorised: 'succeeded',\n      Refused: 'failed',\n    };\n\n    return statusMap[resultCode] || 'unknown';\n  }\n\n  private mapWebhookEventType(eventCode: string): string {\n    const eventMap: Record<string, string> = {\n      AUTHORISATION: 'payment_intent.succeeded',\n      CANCELLATION: 'payment_intent.cancelled',\n      REFUND: 'charge.refunded',\n      CAPTURE: 'payment_intent.captured',\n    };\n\n    return eventMap[eventCode] || 'unknown';\n  }\n}\n","// ============================================================================\n// Globalization Package Exports\n// ============================================================================\n\n// Currency Management\nexport * from './currencies/currency-manager';\n\n// Tax Management\nexport * from './tax/tax-manager';\n\n// Localization\nexport * from './localization/payment-methods';\n\n// Additional Providers\nexport * from './providers/adyen-provider';\n\n// ============================================================================\n// Main Globalization Manager\n// ============================================================================\n\nimport { CurrencyManager, globalCurrencyManager } from './currencies/currency-manager';\nimport { TaxManager, globalTaxManager } from './tax/tax-manager';\nimport { PaymentMethodManager, globalPaymentMethodManager } from './localization/payment-methods';\n\nexport class GlobalizationManager {\n  private currencyManager: CurrencyManager;\n  private taxManager: TaxManager;\n  private paymentMethodManager: PaymentMethodManager;\n\n  constructor() {\n    this.currencyManager = globalCurrencyManager;\n    this.taxManager = globalTaxManager;\n    this.paymentMethodManager = globalPaymentMethodManager;\n  }\n\n  // ============================================================================\n  // Currency Operations\n  // ============================================================================\n\n  async convertCurrency(\n    amount: number,\n    fromCurrency: string,\n    toCurrency: string,\n    fees: number = 0\n  ) {\n    return this.currencyManager.convertCurrency(amount, fromCurrency, toCurrency, fees);\n  }\n\n  formatCurrency(amount: number, currencyCode: string, locale: string = 'en-US') {\n    return this.currencyManager.formatCurrency(amount, currencyCode, locale);\n  }\n\n  getSupportedCurrencies() {\n    return this.currencyManager.getSupportedCurrencies();\n  }\n\n  // ============================================================================\n  // Tax Operations\n  // ============================================================================\n\n  calculateTax(\n    subtotal: number,\n    jurisdictionId: string,\n    customerId?: string,\n    date: Date = new Date()\n  ) {\n    return this.taxManager.calculateTax(subtotal, jurisdictionId, customerId, date);\n  }\n\n  findJurisdictionByLocation(location: {\n    country: string;\n    region?: string;\n    city?: string;\n    postalCode?: string;\n  }) {\n    return this.taxManager.findJurisdictionByLocation(location);\n  }\n\n  getTaxRates(jurisdictionId: string, date: Date = new Date()) {\n    return this.taxManager.getTaxRates(jurisdictionId, date);\n  }\n\n  // ============================================================================\n  // Payment Method Operations\n  // ============================================================================\n\n  getLocalizedPaymentMethods(country: string, currency: string) {\n    return this.paymentMethodManager.getLocalizedPaymentMethods(country, currency);\n  }\n\n  getBestPaymentMethods(\n    country: string,\n    currency: string,\n    amount: number,\n    preferences?: {\n      instant?: boolean;\n      lowFees?: boolean;\n      popular?: boolean;\n    }\n  ) {\n    return this.paymentMethodManager.getBestPaymentMethods(country, currency, amount, preferences);\n  }\n\n  calculatePaymentMethodFees(paymentMethodId: string, amount: number) {\n    return this.paymentMethodManager.calculatePaymentMethodFees(paymentMethodId, amount);\n  }\n\n  // ============================================================================\n  // Combined Operations\n  // ============================================================================\n\n  async calculateTotalCost(\n    subtotal: number,\n    currency: string,\n    country: string,\n    customerId?: string,\n    paymentMethodId?: string\n  ) {\n    // Find jurisdiction for tax calculation\n    const jurisdiction = this.taxManager.findJurisdictionByLocation({ country });\n    if (!jurisdiction) {\n      throw new Error(`No jurisdiction found for country: ${country}`);\n    }\n\n    // Calculate tax\n    const taxCalculation = this.taxManager.calculateTax(subtotal, jurisdiction.id, customerId);\n\n    // Calculate payment method fees if provided\n    let paymentFees = 0;\n    if (paymentMethodId) {\n      const fees = this.paymentMethodManager.calculatePaymentMethodFees(paymentMethodId, subtotal);\n      paymentFees = fees.total;\n    }\n\n    return {\n      subtotal,\n      tax: taxCalculation.total - subtotal,\n      paymentFees,\n      total: taxCalculation.total + paymentFees,\n      currency,\n      jurisdiction: jurisdiction.name,\n      breakdown: {\n        subtotal,\n        tax: taxCalculation.total - subtotal,\n        paymentFees,\n        total: taxCalculation.total + paymentFees,\n      },\n    };\n  }\n\n  // ============================================================================\n  // Localization Helpers\n  // ============================================================================\n\n  getLocalizedPaymentOptions(\n    country: string,\n    currency: string,\n    amount: number,\n    preferences?: {\n      instant?: boolean;\n      lowFees?: boolean;\n      popular?: boolean;\n    }\n  ) {\n    const paymentMethods = this.paymentMethodManager.getBestPaymentMethods(\n      country,\n      currency,\n      amount,\n      preferences\n    );\n\n    return paymentMethods.map(method => ({\n      id: method.paymentMethodId,\n      name: method.displayName,\n      description: method.description,\n      icon: method.icon,\n      fees: this.paymentMethodManager.calculatePaymentMethodFees(method.paymentMethodId, amount),\n      isPopular: method.isPopular,\n      isRecommended: method.isRecommended,\n    }));\n  }\n}\n\n// ============================================================================\n// Global Globalization Manager Instance\n// ============================================================================\n\nexport const globalGlobalizationManager = new GlobalizationManager();\n\n// ============================================================================\n// React Hooks for Globalization\n// ============================================================================\n\nimport { useState, useEffect } from 'react';\n\nexport function useCurrencyConversion(amount: number, fromCurrency: string, toCurrency: string) {\n  const [conversion, setConversion] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!amount || !fromCurrency || !toCurrency) return;\n\n    const convert = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const result = await globalGlobalizationManager.convertCurrency(\n          amount,\n          fromCurrency,\n          toCurrency\n        );\n        setConversion(result);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Conversion failed');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    convert();\n  }, [amount, fromCurrency, toCurrency]);\n\n  return { conversion, loading, error };\n}\n\nexport function useLocalizedPaymentMethods(country: string, currency: string, amount: number) {\n  const [paymentMethods, setPaymentMethods] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!country || !currency || !amount) return;\n\n    const fetchPaymentMethods = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const methods = globalGlobalizationManager.getLocalizedPaymentMethods(country, currency);\n        setPaymentMethods(methods);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch payment methods');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPaymentMethods();\n  }, [country, currency, amount]);\n\n  return { paymentMethods, loading, error };\n}\n\nexport function useTaxCalculation(subtotal: number, country: string, customerId?: string) {\n  const [taxCalculation, setTaxCalculation] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!subtotal || !country) return;\n\n    const calculate = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const jurisdiction = globalGlobalizationManager.findJurisdictionByLocation({\n          country,\n        });\n\n        if (!jurisdiction) {\n          throw new Error(`No jurisdiction found for country: ${country}`);\n        }\n\n        const calculation = globalGlobalizationManager.calculateTax(\n          subtotal,\n          jurisdiction.id,\n          customerId\n        );\n\n        setTaxCalculation(calculation);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Tax calculation failed');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    calculate();\n  }, [subtotal, country, customerId]);\n\n  return { taxCalculation, loading, error };\n}\n\n// ============================================================================\n// Default Export\n// ============================================================================\n\nexport default GlobalizationManager;\n"]}